<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Syzygy</title>
    <link>http://intro.syzygy.ca/index.xml</link>
    <description>Recent content on Introduction to Syzygy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 19:56:50 +0100</lastBuildDate>
    <atom:link href="http://intro.syzygy.ca/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://intro.syzygy.ca/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://intro.syzygy.ca/introduction/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/introduction/</guid>
      <description>

&lt;h1 id=&#34;using-syzygy&#34;&gt;Using Syzygy&lt;/h1&gt;

&lt;p&gt;The syzygy service is a set of computational tools made available through a partnership of the Pacific Institute for the Mathematical Science (&lt;a href=&#34;https://www.pims.math.ca&#34;&gt;https://www.pims.math.ca&lt;/a&gt;), Compute Canada (&lt;a href=&#34;https://www.computecanada.ca&#34;&gt;https://www.computecanada.ca&lt;/a&gt;) and Cybera (&lt;a href=&#34;http://www.cybera.ca/&#34;&gt;http://www.cybera.ca/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Syzygy is pronounced like the start of &amp;ldquo;Sizzle&amp;rdquo; &amp;ndash; sizz eh gee. It means the &lt;a href=&#34;http://www.nytimes.com/1981/03/31/science/science-watch-a-really-big-syzygy.html&#34;&gt;alignment of three or more celestial objects&lt;/a&gt;. In this book, it represents the alignment of text, math, and code in a convenient tool called a Jupyter notebook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/c/c2/Three_Planets_Dance_Over_La_Silla.jpg&#34; alt=&#34;syzygy-image&#34; /&gt;
(Image credit: &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Three_Planets_Dance_Over_La_Silla.jpg&#34;&gt;European Southern Observatory&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This eBook is a brief introduction on how to use these computing tools.&lt;/p&gt;

&lt;p&gt;Code samples for the book can be launched on Binder. Click here:&lt;br /&gt;
&lt;a href=&#34;http://mybinder.org:/repo/mlamoureux/usingsyzygy&#34;&gt;&lt;img src=&#34;http://mybinder.org/badge.svg&#34; alt=&#34;Binder&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a Jupyter server (such as XXX.syzygy.ca) you may clone a github repository of all the code in this book using this command from your Unix/bash shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pimsmath/syzygy-intro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://media.pims.math.ca/logos/webhorizfulllarge.png&#34; alt=&#34;Pims logo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://intro.syzygy.ca/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/getting-started/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;We quickly show you how to log in, and a few other pointers.&lt;/p&gt;

&lt;p&gt;Click on the subsections to read further.&lt;/p&gt;

&lt;h2 id=&#34;logging-in-and-browsers&#34;&gt;Logging In, and Browsers.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/sfu-jupyter.png&#34; alt=&#34;SFU login&#34; 
    width =300&#34; align = &#34;right&#34;&gt;&lt;/p&gt;

&lt;p&gt;Log into the syzygy service by using your home university credentials. Currently, three sites are up and running:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sfu.syzygy.ca&#34;&gt;https://sfu.syzygy.ca&lt;/a&gt;    Simon Fraser University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ucalgary.syzygy.ca&#34;&gt;https://ucalgary.syzygy.ca&lt;/a&gt;  University of Calgary&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ubc.syzygy.ca&#34;&gt;https://ubc.syzygy.ca&lt;/a&gt; University of British Columbia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your &amp;ldquo;university credentials&amp;rdquo; will be something like your campus-wide login ID, student or employee number, etc. You will also need to enter the password connected to your campus-wide login ID or number. This information is held privately by your university IT group, so privacy is assured by your university.&lt;/p&gt;

&lt;p&gt;You can use any web browser that you like. However, some experience suggests the following:
- Firefox is better at rendering math formulas, but cut/copy/paste does not work in the terminal.
- Chrome is better at cut/copy/paste in the terminal, important when using GIT, for instance.
- Internet Explorer is not something to use, for many good reasons.&lt;/p&gt;

&lt;h2 id=&#34;notebooks-terminals-and-unix&#34;&gt;Notebooks, terminals and Unix&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;ve logged in, the syzygy service will start a &lt;strong&gt;server&lt;/strong&gt; for you, which is the computing service you are accessing. (If it doesn&amp;rsquo;t start automatically, click on the &amp;ldquo;Start Server&amp;rdquo; button.) Once the server is running, you will be presented with a list of files and folders that exist in your account. This is called the Hub, and is a view like the Finder on a Mac, or the File Explorer on a Windows computer.&lt;/p&gt;

&lt;p&gt;From this Hub, you can click on files and folders to open them, you can select them and take actions like renaming them, duplicating them, or removing them. Some of the files will have the suffix .ipynb, which stands for &amp;ldquo;iPython Notebook.&amp;rdquo; Despite the name, the Notebook might have nothing to do with Python &amp;ndash; it is there for historical reasons.&lt;/p&gt;

&lt;p&gt;Notebooks are files containing formatted text, math formulas, and computer code. Most of the time you will be creating and working with Notebooks in syzygy,  Each Notebook has a collection of cells, which you create, edit and run.&lt;/p&gt;

&lt;p&gt;So keep this as your focus for your work &amp;ndash; you will work in Notebooks, and you will create pieces of text, math, and code to use.&lt;/p&gt;

&lt;p&gt;However, sometimes you need to know that in the background of the Jupyter Hub is a Unix machine that does all the work. In the PIMS case, this is running on hardware from Compute Canada, or Cybera.&lt;/p&gt;

&lt;p&gt;To access the Unix shell, you can open a terminal from the Hub, and do all the usual Unix bash shell operations. You can&amp;rsquo;t access superuser commands (sudo, etc.) but you can do just about everything else you like in Unix. If you are an experienced Unix user, feel free to open a terminal and browse around.&lt;/p&gt;

&lt;p&gt;Personally, I try to avoid using the Unix shell, but there are times when it is a must. (For instance, to install certain packages, or to access files on Github or on remote machinces.) There are notes on how to do this later in this book.&lt;/p&gt;

&lt;h2 id=&#34;moving-files-around&#34;&gt;Moving files around&lt;/h2&gt;

&lt;p&gt;At some point you will want to reorganize the many files and folders you have in your Jupyter Hub.&lt;/p&gt;

&lt;p&gt;If you like Unix, you can always open a new terminal and move files around using the &amp;ldquo;mv&amp;rdquo; or &amp;ldquo;cp&amp;rdquo; commands.&lt;/p&gt;

&lt;p&gt;If you want to avoid Unix, you can use the  Hub&amp;rsquo;s naming system to move files around.&lt;/p&gt;

&lt;p&gt;Select a file in the Hub by clicking on the square box at the left of the file&amp;rsquo;s name. You are then given the option to &amp;ldquo;rename&amp;rdquo; the file. Click on the rename button, and then enter one of the following:
- newname  &amp;ndash; to give the file the new name
- ../oldname &amp;ndash; to move the file up and out of the current folder, into the previous forlder
- foldername/oldname &amp;ndash; to move the file into the folder called &amp;ldquo;foldername.&amp;rdquo; This folder should already exist (because you created it earlier with a &amp;ldquo;new folder&amp;rdquo; command).&lt;/p&gt;

&lt;p&gt;These renaming methods also work to move folders and their contents.&lt;/p&gt;

&lt;p&gt;To move across several branches in the directory tree, you need to know the full path name of your files and where they are to go. This means you need to find out the name of your root tree structure. A fast way to do this is to use the magic command %cd in a notebook.&lt;/p&gt;

&lt;p&gt;Open a notebook, click on an empty cell, and type %cd, hit shift-return. It will return the director root name. Typically something like /home/username or /home/usernumber.&lt;/p&gt;

&lt;p&gt;You can now use this to move a file into any folder. Just rename the file something like /home/username/folderA/filename. (the folderA better exist already, for you to move something into this.)&lt;/p&gt;

&lt;p&gt;See the Unix Tricks section on Unix magic for more tips on moving files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Basic Elements</title>
      <link>http://intro.syzygy.ca/the-basic-elements/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/the-basic-elements/</guid>
      <description>

&lt;p&gt;The syzygy computing service is an implementation of the Jupyter Hub on dedicated hardware accessible over the web. There is a great deal of information about Jupyter available at the Jupyter project site,
&lt;a href=&#34;http://jupyter.org/&#34;&gt;http://jupyter.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are four key concepts to master:
- the Hub
- the Notebook
- Markdown Language (in a Notebook)
- Computing (in a Notebook).&lt;/p&gt;

&lt;p&gt;This chapter discusses all four.&lt;/p&gt;

&lt;h2 id=&#34;using-the-hub&#34;&gt;Using the Hub&lt;/h2&gt;

&lt;p&gt;You get to the Hub by logging into the syzygy.ca service and clicking the button to &amp;ldquo;Start My Server.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Hub is a page that lists all your files and folders. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/assets/Hub.png&#34; alt=&#34;Hub image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the Hub looks a lot like the list of files and folders you would see in the Finder on MacOS, or in the File Explorer in Windows.&lt;/p&gt;

&lt;p&gt;At the top right corner of this front page is a &amp;ldquo;Control Panel&amp;rdquo; that lets you access your Jupyter server, to turn it on or off. Also is the logout button, to end your session.&lt;/p&gt;

&lt;p&gt;The main body is the list of folders and files that you have on your server.&lt;/p&gt;

&lt;p&gt;Click on a file or folder to open it. Use the checkbox on the left to select a file, then do something with it. For instance, you can choose to rename it, copy it, stop it from running, or delete it.&lt;/p&gt;

&lt;p&gt;It is a good idea to create folders at the top level, to organize your work into usable spaces. It turns out it is hard to move a file once it is created. (More on this below.) So you should start by organizing your folders and files at the top level.&lt;/p&gt;

&lt;p&gt;Near the top right, you see the upload button, which allows you to upload a file from your computer onto the Jupyter Hub. You can upload any file, including any data files or image files you might wish to analyse.&lt;/p&gt;

&lt;p&gt;Also near the top right is the &amp;ldquo;New&amp;rdquo; button, which allows you to create a new folder or file. You can make text files, notebook files in Python, Julia or R, or open a Unix terminal window.&lt;/p&gt;

&lt;h2 id=&#34;moving-files-between-folders&#34;&gt;Moving files between folders&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s not documented, but there is a way to move files and folders in and out of various folders directly from the Hub.&lt;/p&gt;

&lt;p&gt;Select a file listed in the Hub by clicking on the square box at the left of the file&amp;rsquo;s name. You are then given the option to &amp;ldquo;rename&amp;rdquo; the file. Click on the rename button, and then enter one of the following:
- newname  &amp;ndash; to give the file the new name
- ../oldname &amp;ndash; to move the file up and out of the current folder, into the previous forlder
- foldername/oldname &amp;ndash; to move the file into the folder called &amp;ldquo;foldername.&amp;rdquo; This folder should already exist (because you created it earlier with a &amp;ldquo;new folder&amp;rdquo; command).&lt;/p&gt;

&lt;p&gt;These renaming methods also work to move folders and their contents.&lt;/p&gt;

&lt;p&gt;To move across several branches in the directory tree, you need to know the full path name of your files and where they are to go. This means you need to find out the name of your root tree structure. A fast way to do this is to use the magic command %cd in a notebook.&lt;/p&gt;

&lt;p&gt;Open a notebook, click on an empty cell, and type %cd, hit shift-return. It will return the director root name. Typically something like /home/username or /home/usernumber.&lt;/p&gt;

&lt;p&gt;You can now use this to move a file into any folder. Just rename the file something like /home/username/folderA/filename. (the folderA better exist already, for you to move something into this.)&lt;/p&gt;

&lt;h2 id=&#34;using-notebooks&#34;&gt;Using Notebooks&lt;/h2&gt;

&lt;p&gt;From the Hub, you can click on a Notebook (a files with the suffix .ipynb) or create a new one with the &amp;ldquo;New&amp;rdquo; button. You need to pick a computing language (Python, Julia or R) when you create a new Notebook; for now, just choose &lt;strong&gt;Python 3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Notebook will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/assets/Notebook.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the top is the name of the notebook (in this case, &amp;ldquo;Untitled&amp;rdquo;). You can click on that name and edit it to whatever you like.&lt;/p&gt;

&lt;p&gt;Just under the title is the menu bar, which allows you to do many things with the Notebook, including saving it, downloading it to your own computer, editing it, inserting new cells, and so on.&lt;/p&gt;

&lt;p&gt;There is also an icon bar of menu short cuts. All of them are pretty obvious.&lt;/p&gt;

&lt;p&gt;Below the menu controls is the Notebook content, which consists of a sequence of cells. Each cell can contain Markdown text or computer code. You select which kind of content for that cell from the little icon in the icon bar a the top.&lt;/p&gt;

&lt;p&gt;In the example illustrated here, the first cell is just text. It says &amp;ldquo;This is an example of a Notebook.&amp;rdquo; The second cell is Markdown text, including a math formula in LaTeX format. It starts &amp;ldquo;Here is an example of some math&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The third cell shows the math formula as a real math formula, with an integral sign and all. The math is just typed in (like in the second cell), and then you hit &amp;ldquo;shift-return&amp;rdquo; on the keyboard to typeset the math.&lt;/p&gt;

&lt;p&gt;The final few cells show some code, that loads in some plotting tools and makes a simple plot.&lt;/p&gt;

&lt;h2 id=&#34;pretty-text-and-math-markdown-language&#34;&gt;Pretty Text and Math (Markdown Language)&lt;/h2&gt;

&lt;p&gt;One great feature of the Jupyter Notebooks is that they can contain formatted text, and mathematics, using the Markdown language.&lt;/p&gt;

&lt;p&gt;Markdown is a rich language: a quick introduction to it is available here:
&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some quick points.&lt;/p&gt;

&lt;h3 id=&#34;editting-and-typesetting&#34;&gt;Editting and typesetting&lt;/h3&gt;

&lt;p&gt;You simply type your text and Markdown symbols into a cell, and hit &amp;ldquo;shift-return&amp;rdquo; to typeset the cell into pretty text (and math). Click on the cell again to undo the typesetting, so you can edit and fix your text. Make sure, of course, that you have marked the cell as &amp;ldquo;Markdown&amp;rdquo; and not &amp;ldquo;Code.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;headers&#34;&gt;Headers&lt;/h3&gt;

&lt;p&gt;Headers are made by starting the line with one or more hash marks #&lt;/p&gt;

&lt;p&gt;#### This is a level-4 header, in text form&lt;/p&gt;

&lt;h5 id=&#34;this-is-the-resulting-header&#34;&gt;This is the resulting header&lt;/h5&gt;

&lt;h3 id=&#34;emphasis&#34;&gt;Emphasis&lt;/h3&gt;

&lt;p&gt;Add emphasis by surrounding text with asterix or underscores.&lt;/p&gt;

&lt;p&gt;* italics * and ** bold **:  &lt;em&gt;Italics&lt;/em&gt; and &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Type this:&lt;/p&gt;

&lt;p&gt;* Apple&lt;/p&gt;

&lt;p&gt;* Orange&lt;/p&gt;

&lt;p&gt;* Pear&lt;/p&gt;

&lt;p&gt;to get a list like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Pear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web-links&#34;&gt;Web links&lt;/h3&gt;

&lt;p&gt;Type this: [GitHub](&lt;a href=&#34;http://github.com&#34;&gt;http://github.com&lt;/a&gt;)
to get a clickable link &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mathematics&#34;&gt;Mathematics&lt;/h3&gt;

&lt;p&gt;Use the dollar sign \$ to indicate the start and end of TeX code for your math.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is a basic integral: $\int \cos(x) dx = \sin(x)$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a basic integral: $$\int \cos(x) dx =
\sin(x)$$&lt;/p&gt;

&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Here is some code to embed an image from the web:

![Image of Yaktocat](https://octodex.github.com/images/yaktocat.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://octodex.github.com/images/yaktocat.png&#34; alt=&#34;Image of Yaktocat&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python for Computing</title>
      <link>http://intro.syzygy.ca/python-for-computing/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/python-for-computing/</guid>
      <description>

&lt;h2 id=&#34;python-for-computing&#34;&gt;Python for Computing&lt;/h2&gt;

&lt;p&gt;There are many online resources for learning Python. A good place to start is the documentation provided by the Python Software Foundation, located here: &lt;a href=&#34;https://www.python.org/doc/&#34;&gt;https://www.python.org/doc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This chapter focuses on how to use Python within a Jupyter notebook. Doing simple calculations in Python is very straightforward. However, once you try to do somethig complex, there are a few tricks to learn.  In particular,  how to get plots to appear in the notebook, how to do animations, and a few other niceties.&lt;/p&gt;

&lt;h2 id=&#34;python-2-or-3&#34;&gt;Python 2 or 3&lt;/h2&gt;

&lt;p&gt;Please use &lt;strong&gt;Python 3&lt;/strong&gt;. That is the modern version of the language.&lt;/p&gt;

&lt;p&gt;Many people recommend using Python 2 because some software libraries (particularly in scientific computing) have not been converted yet to the new version of Python. This can be a problem, but really, &lt;strong&gt;Python 3&lt;/strong&gt; has been around for almost a decade (released in Dec 2008) so get with the game, folks!&lt;/p&gt;

&lt;p&gt;For the record, Apple&amp;rsquo;s Mac OS X still is only equipped with Python 2. You can upgrade from the usual sources (e.g. Anaconda). This only makes a difference if you want to run your code locally.&lt;/p&gt;

&lt;p&gt;How different are the two versions? Not much. The command &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; returns 0 in Python 2 (integer division) while &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; returns .66666666666 in &lt;strong&gt;Python 3&lt;/strong&gt; (floating point division). And printing is a bit different. And there is enough new, good stuff in &lt;strong&gt;Python 3&lt;/strong&gt; that you really should use it&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Use** Python 3**, please.&lt;/p&gt;

&lt;h2 id=&#34;plotting-in-a-python-notebook&#34;&gt;Plotting in a Python notebook&lt;/h2&gt;

&lt;p&gt;Three things before you can plot.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you tell Jupyter that you want plots to appear inline&lt;/li&gt;
&lt;li&gt;you load in numerical Python so you can deal with numerical arrays&lt;/li&gt;
&lt;li&gt;you load in PyPlot to do your plotting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is done with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need to use the &amp;ldquo;as np&amp;rdquo; or the &amp;ldquo;as plt&amp;rdquo; but it helps to keep the namespace clean. So when you call functions like &amp;ldquo;sin&amp;rdquo; you need to say where it comes from, as in &amp;ldquo;np.sin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Now, to plot a few numbers, you just call the plot function, with the numbers as an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot([1,4,9,16,25])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Poutput_3_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can plot a piece of the sine function in a similar manner, passing a list of numbers to the sin function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(np.sin([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Poutput_5_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Usually you want to plot x and y values together, which you can do as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6];
y = np.sin(x);
plt.plot(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Poutput_7_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;animating-plots&#34;&gt;Animating Plots&lt;/h2&gt;

&lt;p&gt;We can use html5 for animation, as suggested in this web page: &lt;a href=&#34;http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/&#34;&gt;http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This seems to be the modern way to do animation in Python.&lt;/p&gt;

&lt;p&gt;First step is to initialize some things in Python.
- we need %matplotlib inline to get things to plot right on the notebook
- we need numpy for the math
- se need matplotlib for plotting
- we need animation from matplotlib, and HTML from iPython.display to show the animations&lt;/p&gt;

&lt;p&gt;We get all these with the following imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation, rc
from IPython.display import HTML
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have four steps to get an animated plot&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set up the figure frame&lt;/li&gt;
&lt;li&gt;define the initializing function&lt;/li&gt;
&lt;li&gt;define the function that draws each frame of the animation&lt;/li&gt;
&lt;li&gt;call the animator function, which creates all the frames and saves them for you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we are ready to call &amp;ldquo;HTML&amp;rdquo; to display the animation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# First set up the figure, the axis, and the plot element we want to animate
fig, ax = plt.subplots()

ax.set_xlim(( 0, 2))
ax.set_ylim((-2, 2))

line, = ax.plot([], [], lw=2)
# NOTE: THIS WILL DISPLAY JUST AN EMPTY BOX.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Aoutput_3_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return (line,)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# animation function. This is called sequentially
def animate(i):
    x = np.linspace(0, 2, 1000)
    y = np.sin(2 * np.pi * (x - 0.01 * i))
    line.set_data(x, y)
    return (line,)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# call the animator. blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=100, interval=20, blit=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;HTML(anim.to_html5_video())
&lt;/code&gt;&lt;/pre&gt;

&lt;video width=&#34;600.0&#34; height=&#34;400.0&#34; controls autoplay loop&gt;
  &lt;source type=&#34;video/mp4&#34; src=&#34;data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAACblm1kYXQAAAKhBgX//53cRem9
5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQ4IC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENv
cHlsZWZ0IDIwMDMtMjAxNiAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9w
dGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDExMyBtZT1o
ZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2
IGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MSBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0
X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTEyIGxvb2thaGVhZF90aHJlYWRz
PTIgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9j
b21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBiX3B5cmFtaWQ9MiBiX2FkYXB0
PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29wPTAgd2VpZ2h0cD0yIGtleWlu
dD0yNTAga2V5aW50X21pbj0yNSBzY2VuZWN1dD00MCBpbnRyYV9yZWZyZXNoPTAgcmNfbG9va2Fo
ZWFkPTQwIHJjPWNyZiBtYnRyZWU9MSBjcmY9MjMuMCBxY29tcD0wLjYwIHFwbWluPTAgcXBtYXg9
NjkgcXBzdGVwPTQgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAFutliIQAL//+9q78yytHC5Uu
HVl7s1Hy6Ely/YgwfWgAAAMAAAMAACbiomdFhTHibIAAAC+Te5z3Pad53AAUywMv1jzv/Rt+kvNT
Byqp/2w2NZ73E7fntr3RGFKiHUwEOpr975eEt5WQCBG+FxYTNiRtmk8HNCuubUzMVXNyLlWIuaNY
XkLYLc/c7Ord6YrPWMCdEXPdBChCxi14ILQMFv9TYGFU/IpOE0NNPy7C9PsNoV8W5ROTL4AhyKXj
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
ACBtZGhkAAAAAAAAAAAAAAAAAAAyAAAAZABVxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAA
AAAAAABWaWRlb0hhbmRsZXIAAAAF9G1pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAA
HGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAABbRzdGJsAAAAtHN0c2QAAAAAAAAAAQAAAKRhdmMx
AAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAlgBkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAGP//AAAAMmF2Y0MBZAAf/+EAGWdkAB+s2UCYM+XhAAADAAEAAAMA
ZA8YMZYBAAZo6+PLIsAAAAAcdXVpZGtoQPJfJE/FujmlG88DI/MAAAAAAAAAGHN0dHMAAAAAAAAA
AQAAAGQAAAEAAAAAFHN0c3MAAAAAAAAAAQAAAAEAAAL4Y3R0cwAAAAAAAABdAAAAAQAAAgAAAAAB
AAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAMAAAAAAQAAAQAAAAABAAAEAAAAAAIA
AAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAA
AAAAAAABAAABAAAAAAEAAAQAAAAAAgAAAQAAAAABAAAEAAAAAAIAAAEAAAAAAQAABAAAAAACAAAB
AAAAAAEAAAMAAAAAAQAAAQAAAAABAAADAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAA
AAAAAQAAAQAAAAABAAADAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAA
AAABAAADAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAA
AAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAMAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAA
AQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAAB
AAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEA
AAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAA
AQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAA
AAAAAAEAAAEAAAAAAQAABAAAAAACAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEA
AAAAAQAABAAAAAACAAABAAAAAAEAAAMAAAAAAQAAAQAAAAABAAAEAAAAAAIAAAEAAAAAHHN0c2MA
AAAAAAAAAQAAAAEAAABkAAAAAQAAAaRzdHN6AAAAAAAAAAAAAABkAAAZlAAAAr8AAAGiAAAA9wAA
AP8AAAGOAAABBQAAAh8AAAEdAAAA0AAAAa8AAAGDAAABHwAAAPkAAAIJAAABRAAAAO8AAADiAAAC
WgAAAW0AAAD0AAABtwAAAWIAAADcAAABwQAAAUMAAAEHAAACOwAAAQ8AAAHgAAAA1wAAAjIAAAE4
AAAA7AAAAOAAAAH2AAAA1QAAAfEAAAD3AAAAzwAAAM0AAAHeAAABAAAAAg8AAADzAAAA1AAAANcA
AAIZAAABIQAAAO8AAADHAAACJQAAAOsAAAGaAAABIwAAAMQAAADqAAAB2gAAATQAAAEYAAAA9QAA
AhwAAAFWAAABAwAAAP8AAAIPAAAA+AAAAMkAAADjAAACBQAAARIAAADmAAAA3wAAAkMAAAEDAAAA
8wAAANAAAAH0AAABAwAAANwAAADmAAACNAAAARAAAAEBAAAAxQAAAqkAAAEdAAAA0gAAAhIAAAGQ
AAABBQAAAQAAAAGYAAABOQAAAOoAAAHnAAABCAAAASwAAAFRAAABFQAAABRzdGNvAAAAAAAAAAEA
AAAsAAAAYnVkdGEAAABabWV0YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAA
AAAtaWxzdAAAACWpdG9vAAAAHWRhdGEAAAABAAAAAExhdmY1Ny40MS4xMDA=
&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Anytime you need the animation, you can call it up at will, with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# equivalent to rcParams[&#39;animation.html&#39;] = &#39;html5&#39;
rc(&#39;animation&#39;, html=&#39;html5&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-analysis&#34;&gt;Data Analysis&lt;/h2&gt;

&lt;h3 id=&#34;a-simple-demo-with-pandas-in-python&#34;&gt;A simple demo with pandas in Python&lt;/h3&gt;

&lt;p&gt;This notebook is based on course notes from Lamoureux&amp;rsquo;s course Math 651 at the University of Calgary, Winter 2016.&lt;/p&gt;

&lt;p&gt;This was an exercise to  try out some resourse in Python. Specifically, we want to scrape some data from the web concerning stock prices, and display in a Panda. Then do some basic data analysis on the information.&lt;/p&gt;

&lt;p&gt;We take advantage of the fact that there is a lot of financial data freely accessible on the web, and lots of people post information about how to use it.&lt;/p&gt;

&lt;h3 id=&#34;pandas-in-python&#34;&gt;Pandas in Python&lt;/h3&gt;

&lt;h3 id=&#34;how-to-access-real-data-from-the-web-and-apply-data-analysis-tools&#34;&gt;How to access real data from the web and apply data analysis tools.&lt;/h3&gt;

&lt;p&gt;I am using the book &lt;strong&gt;Python for Data Analysis&lt;/strong&gt; by Wes McKinney as a reference for this section.&lt;/p&gt;

&lt;p&gt;The point of using Python for this is that a lot of people have created good code to do this.&lt;/p&gt;

&lt;p&gt;The pandas name comes from Panel Data, an econometrics terms for multidimensional structured data sets, as well as from Python Data Analysis.&lt;/p&gt;

&lt;p&gt;The dataframe objects that appear in pandas originated in R. But apparently thery have more functionality in Python than in R.&lt;/p&gt;

&lt;p&gt;I will be using PYLAB as well in this section, so we can make use of NUMPY and MATPLOTLIB.&lt;/p&gt;

&lt;h3 id=&#34;accessing-financial-data&#34;&gt;Accessing financial data&lt;/h3&gt;

&lt;p&gt;For free, historical data on commodities like Oil, you can try this site: &lt;a href=&#34;http://www.databank.rbs.com&#34;&gt;http://www.databank.rbs.com&lt;/a&gt;
This site will download data directly into spreadsheets for you, plot graphs of historical data, etc. Here is an example of oil prices (West Texas Intermdiate), over the last 15 years. Look how low it goes&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/RBS_graph.jpg&#34; alt=&#34;Image from RBS DataBank&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yahoo supplies current stock and commodity prices. Here is an intereting site that tells you how to download loads of data into a csv file.
&lt;a href=&#34;http://www.financialwisdomforum.org/gummy-stuff/Yahoo-data.htm&#34;&gt;http://www.financialwisdomforum.org/gummy-stuff/Yahoo-data.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is another site that discusses accessing various financial data sources. &lt;a href=&#34;http://quant.stackexchange.com/questions/141/what-data-sources-are-available-online&#34;&gt;http://quant.stackexchange.com/questions/141/what-data-sources-are-available-online&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;loading-data-off-the-web&#34;&gt;Loading data off the web&lt;/h3&gt;

&lt;p&gt;To get away from the highly contentious issues of oil prices and political parties, let&amp;rsquo;s look at some simple stock prices &amp;ndash; say Apple and Microsoft. We can import some basic webtools to get prices directly from Yahoo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get some basic tools
%pylab inline
from pandas import Series, DataFrame
import pandas as pd
import pandas.io.data as web

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Populating the interactive namespace from numpy and matplotlib


/opt/conda/envs/python2/lib/python2.7/site-packages/pandas/io/data.py:35: FutureWarning: 
The pandas.io.data module is moved to a separate package (pandas-datareader) and will be removed from pandas in a future version.
After installing the pandas-datareader package (https://github.com/pydata/pandas-datareader), you can change the import ``from pandas.io import data, wb`` to ``from pandas_datareader import data, wb``.
  FutureWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Here are apple and microsoft closing prices since 2001
aapl = web.get_data_yahoo(&#39;AAPL&#39;,&#39;2001-01-01&#39;)[&#39;Adj Close&#39;]
msft = web.get_data_yahoo(&#39;MSFT&#39;,&#39;2001-01-01&#39;)[&#39;Adj Close&#39;]
subplot(2,1,1)
plot(aapl)
subplot(2,1,2)
plot(msft)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7fa262183a90&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_4_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;aapl

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Date
2001-01-02      0.978015
2001-01-03      1.076639
2001-01-04      1.121841
2001-01-05      1.076639
2001-01-08      1.088967
2001-01-09      1.130060
2001-01-10      1.088967
2001-01-11      1.183481
2001-01-12      1.130060
2001-01-16      1.125950
2001-01-17      1.105404
2001-01-18      1.228683
2001-01-19      1.282104
2001-01-22      1.265667
2001-01-23      1.347853
2001-01-24      1.347853
2001-01-25      1.310869
2001-01-26      1.286213
2001-01-29      1.425930
2001-01-30      1.430039
2001-01-31      1.421820
2001-02-01      1.388946
2001-02-02      1.356072
2001-02-05      1.327306
2001-02-06      1.388946
2001-02-07      1.364290
2001-02-08      1.364290
2001-02-09      1.257448
2001-02-12      1.294432
2001-02-13      1.257448
                 ...    
2016-05-04     93.620002
2016-05-05     93.239998
2016-05-06     92.720001
2016-05-09     92.790001
2016-05-10     93.419998
2016-05-11     92.510002
2016-05-12     90.339996
2016-05-13     90.519997
2016-05-16     93.879997
2016-05-17     93.489998
2016-05-18     94.559998
2016-05-19     94.199997
2016-05-20     95.220001
2016-05-23     96.430000
2016-05-24     97.900002
2016-05-25     99.620003
2016-05-26    100.410004
2016-05-27    100.349998
2016-05-31     99.860001
2016-06-01     98.459999
2016-06-02     97.720001
2016-06-03     97.919998
2016-06-06     98.629997
2016-06-07     99.029999
2016-06-08     98.940002
2016-06-09     99.650002
2016-06-10     98.830002
2016-06-13     97.339996
2016-06-14     97.459999
2016-06-15     97.139999
Name: Adj Close, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Let&#39;s look at the changes in the stock prices, normalized as a percentage
aapl_rets = aapl.pct_change()
msft_rets = msft.pct_change()
subplot(2,1,1)
plot(aapl_rets)
subplot(2,1,2)
plot(msft_rets)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7fa2617a5990&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_6_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Let&#39;s look at the correlation between these two series
pd.rolling_corr(aapl_rets, msft_rets, 250).plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/opt/conda/envs/python2/lib/python2.7/site-packages/ipykernel/__main__.py:2: FutureWarning: pd.rolling_corr is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=250).corr(other=&amp;lt;Series&amp;gt;)
  from ipykernel import kernelapp as app





&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa262d44a10&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_7_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-fancy&#34;&gt;Getting fancy.&lt;/h3&gt;

&lt;p&gt;Now, we can use some more sophisticated statistical tools, like least squares regression. However, I had to do some work to get Python to recognize these items. But I didn&amp;rsquo;t work too hard, I just followed the error messages.&lt;/p&gt;

&lt;p&gt;It became clear that I needed to go back to a terminal window to load in some packages. The two commands I had to type in were
- pip install statsmodels
- pip install patsy&lt;/p&gt;

&lt;p&gt;&amp;lsquo;pip&amp;rsquo; is an &amp;lsquo;python installer package&amp;rsquo; that install packages of code onto your computer (or whatever machine is running your python). The two packages &amp;lsquo;statsmodels&amp;rsquo; and &amp;lsquo;patsy&amp;rsquo; are assorted statistical packages. I don&amp;rsquo;t know much about them, but they are easy to find on the web.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We may also try a least square regression, also built in as a panda function
model = pd.ols(y=aapl_rets, x={&#39;MSFT&#39;: msft_rets},window=256)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/opt/conda/envs/python2/lib/python2.7/site-packages/ipykernel/__main__.py:2: FutureWarning: The pandas.stats.ols module is deprecated and will be removed in a future version. We refer to external packages like statsmodels, see some examples here: http://statsmodels.sourceforge.net/stable/regression.html
  from ipykernel import kernelapp as app
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.beta
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;th&gt;intercept&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-14&lt;/th&gt;
      &lt;td&gt;0.796463&lt;/td&gt;
      &lt;td&gt;0.000416&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-15&lt;/th&gt;
      &lt;td&gt;0.788022&lt;/td&gt;
      &lt;td&gt;0.000417&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-16&lt;/th&gt;
      &lt;td&gt;0.789784&lt;/td&gt;
      &lt;td&gt;0.000191&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-17&lt;/th&gt;
      &lt;td&gt;0.802081&lt;/td&gt;
      &lt;td&gt;0.000600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-18&lt;/th&gt;
      &lt;td&gt;0.793941&lt;/td&gt;
      &lt;td&gt;0.000671&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-22&lt;/th&gt;
      &lt;td&gt;0.796478&lt;/td&gt;
      &lt;td&gt;0.000718&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-23&lt;/th&gt;
      &lt;td&gt;0.797909&lt;/td&gt;
      &lt;td&gt;0.001172&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-24&lt;/th&gt;
      &lt;td&gt;0.786143&lt;/td&gt;
      &lt;td&gt;0.000960&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-25&lt;/th&gt;
      &lt;td&gt;0.781526&lt;/td&gt;
      &lt;td&gt;0.001102&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-28&lt;/th&gt;
      &lt;td&gt;0.782449&lt;/td&gt;
      &lt;td&gt;0.001064&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-29&lt;/th&gt;
      &lt;td&gt;0.782113&lt;/td&gt;
      &lt;td&gt;0.001196&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-30&lt;/th&gt;
      &lt;td&gt;0.764488&lt;/td&gt;
      &lt;td&gt;0.001069&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-01-31&lt;/th&gt;
      &lt;td&gt;0.784935&lt;/td&gt;
      &lt;td&gt;0.001246&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-01&lt;/th&gt;
      &lt;td&gt;0.784775&lt;/td&gt;
      &lt;td&gt;0.001254&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-04&lt;/th&gt;
      &lt;td&gt;0.774178&lt;/td&gt;
      &lt;td&gt;0.001252&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-05&lt;/th&gt;
      &lt;td&gt;0.781460&lt;/td&gt;
      &lt;td&gt;0.001383&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-06&lt;/th&gt;
      &lt;td&gt;0.781529&lt;/td&gt;
      &lt;td&gt;0.001354&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-07&lt;/th&gt;
      &lt;td&gt;0.792091&lt;/td&gt;
      &lt;td&gt;0.001506&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-08&lt;/th&gt;
      &lt;td&gt;0.785451&lt;/td&gt;
      &lt;td&gt;0.001019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-11&lt;/th&gt;
      &lt;td&gt;0.788570&lt;/td&gt;
      &lt;td&gt;0.001084&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-12&lt;/th&gt;
      &lt;td&gt;0.793316&lt;/td&gt;
      &lt;td&gt;0.001001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-13&lt;/th&gt;
      &lt;td&gt;0.796715&lt;/td&gt;
      &lt;td&gt;0.001117&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-14&lt;/th&gt;
      &lt;td&gt;0.796227&lt;/td&gt;
      &lt;td&gt;0.001075&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-15&lt;/th&gt;
      &lt;td&gt;0.801823&lt;/td&gt;
      &lt;td&gt;0.001176&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-19&lt;/th&gt;
      &lt;td&gt;0.804453&lt;/td&gt;
      &lt;td&gt;0.000885&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-20&lt;/th&gt;
      &lt;td&gt;0.814666&lt;/td&gt;
      &lt;td&gt;0.001097&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-21&lt;/th&gt;
      &lt;td&gt;0.830058&lt;/td&gt;
      &lt;td&gt;0.000799&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-22&lt;/th&gt;
      &lt;td&gt;0.818041&lt;/td&gt;
      &lt;td&gt;0.001174&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-25&lt;/th&gt;
      &lt;td&gt;0.822848&lt;/td&gt;
      &lt;td&gt;0.001161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2002-02-26&lt;/th&gt;
      &lt;td&gt;0.821503&lt;/td&gt;
      &lt;td&gt;0.001248&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-04&lt;/th&gt;
      &lt;td&gt;0.634886&lt;/td&gt;
      &lt;td&gt;-0.001187&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-05&lt;/th&gt;
      &lt;td&gt;0.632351&lt;/td&gt;
      &lt;td&gt;-0.001121&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-06&lt;/th&gt;
      &lt;td&gt;0.631153&lt;/td&gt;
      &lt;td&gt;-0.001282&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-09&lt;/th&gt;
      &lt;td&gt;0.631186&lt;/td&gt;
      &lt;td&gt;-0.001277&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-10&lt;/th&gt;
      &lt;td&gt;0.627805&lt;/td&gt;
      &lt;td&gt;-0.001240&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-11&lt;/th&gt;
      &lt;td&gt;0.632612&lt;/td&gt;
      &lt;td&gt;-0.001326&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-12&lt;/th&gt;
      &lt;td&gt;0.629215&lt;/td&gt;
      &lt;td&gt;-0.001440&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-13&lt;/th&gt;
      &lt;td&gt;0.626302&lt;/td&gt;
      &lt;td&gt;-0.001429&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-16&lt;/th&gt;
      &lt;td&gt;0.631538&lt;/td&gt;
      &lt;td&gt;-0.001302&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-17&lt;/th&gt;
      &lt;td&gt;0.629171&lt;/td&gt;
      &lt;td&gt;-0.001258&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-18&lt;/th&gt;
      &lt;td&gt;0.629934&lt;/td&gt;
      &lt;td&gt;-0.001218&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-19&lt;/th&gt;
      &lt;td&gt;0.626321&lt;/td&gt;
      &lt;td&gt;-0.001243&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-20&lt;/th&gt;
      &lt;td&gt;0.627607&lt;/td&gt;
      &lt;td&gt;-0.001232&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-23&lt;/th&gt;
      &lt;td&gt;0.625496&lt;/td&gt;
      &lt;td&gt;-0.001210&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-24&lt;/th&gt;
      &lt;td&gt;0.624308&lt;/td&gt;
      &lt;td&gt;-0.001229&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-25&lt;/th&gt;
      &lt;td&gt;0.625938&lt;/td&gt;
      &lt;td&gt;-0.001186&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-26&lt;/th&gt;
      &lt;td&gt;0.625857&lt;/td&gt;
      &lt;td&gt;-0.001192&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-27&lt;/th&gt;
      &lt;td&gt;0.628037&lt;/td&gt;
      &lt;td&gt;-0.001277&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-05-31&lt;/th&gt;
      &lt;td&gt;0.624431&lt;/td&gt;
      &lt;td&gt;-0.001256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-01&lt;/th&gt;
      &lt;td&gt;0.623145&lt;/td&gt;
      &lt;td&gt;-0.001322&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-02&lt;/th&gt;
      &lt;td&gt;0.623414&lt;/td&gt;
      &lt;td&gt;-0.001335&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-03&lt;/th&gt;
      &lt;td&gt;0.620833&lt;/td&gt;
      &lt;td&gt;-0.001279&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-06&lt;/th&gt;
      &lt;td&gt;0.621354&lt;/td&gt;
      &lt;td&gt;-0.001256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-07&lt;/th&gt;
      &lt;td&gt;0.621346&lt;/td&gt;
      &lt;td&gt;-0.001237&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-08&lt;/th&gt;
      &lt;td&gt;0.621420&lt;/td&gt;
      &lt;td&gt;-0.001246&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-09&lt;/th&gt;
      &lt;td&gt;0.620108&lt;/td&gt;
      &lt;td&gt;-0.001200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-10&lt;/th&gt;
      &lt;td&gt;0.620255&lt;/td&gt;
      &lt;td&gt;-0.001216&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-13&lt;/th&gt;
      &lt;td&gt;0.619448&lt;/td&gt;
      &lt;td&gt;-0.001207&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-14&lt;/th&gt;
      &lt;td&gt;0.618853&lt;/td&gt;
      &lt;td&gt;-0.001180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-06-15&lt;/th&gt;
      &lt;td&gt;0.618974&lt;/td&gt;
      &lt;td&gt;-0.001180&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3631 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.beta[&#39;MSFT&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa2617a5550&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_11_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Those two graphs looked similar. Let&#39;s plot them together
subplot(2,1,1)
pd.rolling_corr(aapl_rets, msft_rets, 250).plot()
title(&#39;Rolling correlations&#39;)
subplot(2,1,2)
model.beta[&#39;MSFT&#39;].plot()
title(&#39;Least squaresn model&#39;)


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/opt/conda/envs/python2/lib/python2.7/site-packages/ipykernel/__main__.py:3: FutureWarning: pd.rolling_corr is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=250).corr(other=&amp;lt;Series&amp;gt;)
  app.launch_new_instance()





&amp;lt;matplotlib.text.Text at 0x7fa24cf18d90&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_12_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;more-stocks&#34;&gt;more stocks&lt;/h3&gt;

&lt;p&gt;There is all kinds of neat info on the web. Here is the SPY exchange-traded fund, which tracks the S&amp;amp;P 500 index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;px = web.get_data_yahoo(&#39;SPY&#39;)[&#39;Adj Close&#39;]*10
px
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Date
2010-01-04     998.08658
2010-01-05    1000.72861
2010-01-06    1001.43318
2010-01-07    1005.66052
2010-01-08    1009.00712
2010-01-11    1010.41626
2010-01-12    1000.99287
2010-01-13    1009.44749
2010-01-14    1012.17761
2010-01-15    1000.81670
2010-01-19    1013.32249
2010-01-20    1003.01842
2010-01-21     983.73128
2010-01-22     961.80210
2010-01-25     966.73395
2010-01-26     962.68278
2010-01-27     967.26241
2010-01-28     956.16569
2010-01-29     945.77354
2010-02-01     960.48105
2010-02-02     972.10617
2010-02-03     967.26241
2010-02-04     937.40701
2010-02-05     939.34454
2010-02-08     932.56318
2010-02-09     944.27638
2010-02-10     942.42694
2010-02-11     952.29063
2010-02-12     951.49804
2010-02-16     966.46975
                 ...    
2016-05-04    2050.09995
2016-05-05    2049.70001
2016-05-06    2057.20001
2016-05-09    2058.89999
2016-05-10    2084.49997
2016-05-11    2065.00000
2016-05-12    2065.59998
2016-05-13    2047.59995
2016-05-16    2067.79999
2016-05-17    2048.50006
2016-05-18    2049.10004
2016-05-19    2041.99997
2016-05-20    2054.90005
2016-05-23    2052.10007
2016-05-24    2078.69995
2016-05-25    2092.79999
2016-05-26    2093.39996
2016-05-27    2102.40005
2016-05-31    2098.39996
2016-06-01    2102.70004
2016-06-02    2109.10004
2016-06-03    2102.79999
2016-06-06    2113.50006
2016-06-07    2116.79993
2016-06-08    2123.69995
2016-06-09    2120.80002
2016-06-10    2100.70007
2016-06-13    2084.49997
2016-06-14    2080.39993
2016-06-15    2077.50000
Name: Adj Close, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot(px)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7fa24ce5fa90&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_15_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;scientific-computing-in-python&#34;&gt;Scientific Computing in Python&lt;/h1&gt;

&lt;p&gt;This is a sample of doing some real scientific computing in Python.&lt;/p&gt;

&lt;p&gt;We refer to some ideas in the book &amp;ldquo;Python for Scientists&amp;rdquo; by John M. Stewart. Specifically, we want to explore a numerical solver for ordinary differential equations (ODEs), called ODEint. This solver is based on &lt;em&gt;lsoda&lt;/em&gt;, a Fortran package from Lawrence Livermore Labs that is a reliable workhorse for solving these difficult problems.&lt;/p&gt;

&lt;p&gt;We look at four different ODEs that are interesting, and numerically challenging. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the harmonic oscillator (or linear pendulum)&lt;/li&gt;
&lt;li&gt;the non-linear pendulum&lt;/li&gt;
&lt;li&gt;the Lorenz equation, which is the model for chaotic behaviour&lt;/li&gt;
&lt;li&gt;the van der Pols equation, which is an example of a stiff ODE with periodic behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We do some basic tests of an ODE numerical solver, to test its accuracy, and to consider whether our asymptotic analysis of a pendulum is any good.&lt;/p&gt;

&lt;p&gt;As in previous examples, we must start with code to tell the Notebook to plot items inline, and load in packages to do numerical computations (numpy), scientific computation (scipy) and plotting (matplotlib).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint # This is the numerical solver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start with a second order linear equation, that has the usual harmonic oscillator solutions.&lt;/p&gt;

&lt;p&gt;$$ y&amp;rdquo;(t) + \omega^2 y(t) = 0, \qquad y(0) = 1, y&amp;rsquo;(0) = 0.$$&lt;/p&gt;

&lt;p&gt;To put this into the numerical solver, we need to reformulate as a 2 dimensional, first order system:&lt;br /&gt;
$$\mathbf{y} = (y,y&amp;rsquo;)^T, \qquad \mathbf{y}&amp;lsquo;(t) = (y&amp;rsquo;, -\omega^2 y)^T.$$&lt;br /&gt;
Here is a simple code snippet that solves the problem numerically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def rhs(Y,t,omega):  # this is the function of the right hand side of the ODE
    y,ydot = Y
    return ydot,-omega*omega*y

t_arr=np.linspace(0,2*np.pi,101)
y_init =[1,0]
omega = 2.0
y_arr=odeint(rhs,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.ion()
plt.plot(t_arr,y,t_arr,ydot)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_3_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Let&#39;s draw a phase portrait, plotting y and ydot together
plt.plot(y,ydot)
plt.title(&amp;quot;Solution curve when omega = %4g&amp;quot; % omega)
plt.xlabel(&amp;quot;y values&amp;quot;)
plt.ylabel(&amp;quot;ydot values&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_4_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, I would like to test how accurate this numerical code is, by comparing the exact solution with the numerical solution. The exact solution is given by the initial values of y_init, and omega, and involves cosines and sines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t_arr=np.linspace(0,2*np.pi,101)
y_init =[1,0]
omega = 2.0
y_exact = y_init[0]*np.cos(omega*t_arr) + y_init[1]*np.sin(omega*t_arr)/omega
ydot_exact = -omega*y_init[0]*np.sin(omega*t_arr) + y_init[1]*np.cos(omega*t_arr)
y_arr=odeint(rhs,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.plot(t_arr,y,t_arr,y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_6_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We plot the difference
plt.plot(t_arr,y-y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_7_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, in the test I did above, we see an error that oscillates and grows with time, getting to about size 2x 10^(-7). Which is single precision accuray.&lt;/p&gt;

&lt;p&gt;Now, apparently ODEint figures out good step sizes on its own. Let&amp;rsquo;s try running the code again, with different number of steps in the t-variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numsteps=1000001  # adjust this parameter
y_init =[1,0]
omega = 2.0
t_arr=np.linspace(0,2*np.pi,numsteps)
y_exact = y_init[0]*np.cos(omega*t_arr) + y_init[1]*np.sin(omega*t_arr)/omega
ydot_exact = -omega*y_init[0]*np.sin(omega*t_arr) + y_init[1]*np.cos(omega*t_arr)
y_arr=odeint(rhs,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.plot(t_arr,y-y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_9_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, I went up to one million steps, and the error only reduced to about 1.0x10^(-7). Not much of an improvement.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try another experiment, where we go for a really long time. Say 100 time longer than the example above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numsteps=100001  # adjust this parameter
y_init =[1,0]
omega = 2.0
t_arr=np.linspace(0,2*1000*np.pi,numsteps)
y_exact = y_init[0]*np.cos(omega*t_arr) + y_init[1]*np.sin(omega*t_arr)/omega
ydot_exact = -omega*y_init[0]*np.sin(omega*t_arr) + y_init[1]*np.cos(omega*t_arr)
y_arr=odeint(rhs,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.plot(t_arr,y-y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_11_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting. My little test show the error grow linearly with the length of time. In the first time, 2x10^(-7). For 10 times longer, 2x10^(-6). For 100 times longer, 2x10^(-5). And so one.&lt;/p&gt;

&lt;p&gt;A more subtle question: are these amplitude errors, or phase errors, or perhaps a combination?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1=np.size(t_arr)-1
p0=p1-100
plt.plot(t_arr[p0:p1],y[p0:p1],t_arr[p0:p1],y_exact[p0:p1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_13_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(t_arr[p0:p1],y[p0:p1]-y_exact[p0:p1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_14_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ah ha! This looks like the negative derivative of the solution, which indicates we have a phase error. Because with phase error, we see the difference&lt;br /&gt;
$$\cos(t + \delta) - \cos(t) \approx -\delta\cdot \sin(t)$$&lt;br /&gt;
while with an amplitude error, we would see&lt;br /&gt;
$$(1+\delta)\cos(t) - \cos(t) \approx \delta\cdot \cos(t).$$&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s plot the soluton and the error difference, to see if the derivative zeros line up with peaks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(t_arr[p0:p1],y_exact[p0:p1],t_arr[p0:p1],3000*(y[p0:p1]-y_exact[p0:p1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_16_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the above, we see they don&amp;rsquo;t quite line up. So a bit of phase error, a bit of amplitude error.&lt;/p&gt;

&lt;h3 id=&#34;the-non-linear-pendulum&#34;&gt;The non-linear pendulum&lt;/h3&gt;

&lt;p&gt;Well, it&amp;rsquo;s not to hard to generalize this stuff to the non-linear pendulum, where the restoring force has a sin(t) in it. We want to observe the period changes with the initial conditions (a bigger swing has a longer period).&lt;/p&gt;

&lt;p&gt;The differential equation is:&lt;/p&gt;

&lt;p&gt;$$ y&amp;rdquo;(t) + \omega^2 \sin(y(t)) = 0, \qquad y(0) = \epsilon, y&amp;rsquo;(0) = 0.$$&lt;/p&gt;

&lt;p&gt;To put this into the numerical solver, we need to reformulate as a 2 dimensional, first order system:&lt;/p&gt;

&lt;p&gt;$$\mathbf{y} = (y,y&amp;rsquo;)^T, \qquad \mathbf{y}&amp;lsquo;(t) = (y&amp;rsquo;, -\omega^2 \sin(y))^T.$$&lt;/p&gt;

&lt;p&gt;Here is a simple code snippet that solves the problem numerically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def rhsSIN(Y,t,omega):  # this is the function of the right hand side of the ODE
    y,ydot = Y
    return ydot,-omega*omega*np.sin(y)

omega = .1   # basic frequency
epsilon = .5 # initial displacement, in radians (try 0 to .5)
velocity = 0 # try values from 0 to .2
t_arr=np.linspace(0,2*100*np.pi,1001)
y_init =[epsilon,velocity]

# we first set up the exact solution for the linear oscillator
y_exact = y_init[0]*np.cos(omega*t_arr) + y_init[1]*np.sin(omega*t_arr)/omega
ydot_exact = -omega*y_init[0]*np.sin(omega*t_arr) + y_init[1]*np.cos(omega*t_arr)
y_arr=odeint(rhsSIN,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.ion()
plt.plot(t_arr,y,t_arr,y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_19_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With epsilon = 0.1 (radians, which is about 5.7 degrees), it is hard to see a period shift. With epsilon = 0.5 (radians, which just under 30 degrees), we clearly see a shift after ten cycles of oscillation.&lt;/p&gt;

&lt;p&gt;How big is the shift? Can we figure this out easily with numerics? And how does it compare with the estimate given by the Poincare-Lindstedt method?&lt;/p&gt;

&lt;p&gt;It is kind of fun to set this up with epsilon = pi, which corresponds to an inverted pendulum. The pendulum sits upside down for a while, then slowly moves away from this unstable equilibrium point. The behaviour is very different than the linear harmonic oscillator. We show the example in the next cell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;omega = .1   # basic frequency
epsilon = np.pi+.0001 # initial displacement, in radians (try 0 to .5)
velocity = 0 # try values from 0 to .2
t_arr=np.linspace(0,2*100*np.pi,1001)
y_init =[epsilon,velocity]

# we first set up the exact solution for the linear oscillator
y_exact = y_init[0]*np.cos(omega*t_arr) + y_init[1]*np.sin(omega*t_arr)/omega
ydot_exact = -omega*y_init[0]*np.sin(omega*t_arr) + y_init[1]*np.cos(omega*t_arr)
y_arr=odeint(rhsSIN,y_init,t_arr, args=(omega,))
y,ydot = y_arr[:,0],y_arr[:,1]
plt.ion()
plt.plot(t_arr,y,t_arr,y_exact)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_21_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-lorenz-equation&#34;&gt;The Lorenz equation&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of the butterfly effect (it&amp;rsquo;s even a movie). The idea is that weather can demonstrate chaotic behaviour, so that the flap of a butterfly wing in Brazil could eventually result in a tornado in Alabama.&lt;/p&gt;

&lt;p&gt;Lorenz was studying a simplified model for weather, given by a system of three simple ODEs:&lt;/p&gt;

&lt;p&gt;$$x&amp;rsquo; = \sigma(y-x), \quad y&amp;rsquo;=\rho x - y - xz, \quad z&amp;rsquo; = xy - \beta z$$&lt;/p&gt;

&lt;p&gt;where $$x,y,z$$ are functions of time, and $$\sigma, \rho,\beta$$ are fixed constants.&lt;/p&gt;

&lt;p&gt;When $$\rho$$ is small, the behaviour is quite predictable. But when $$\rho$$ gets better than about 24.7, you get strange, aperiodic behaviour.&lt;/p&gt;

&lt;p&gt;Here is some code that demonstrates the behaviour. We also include 3D plots&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def rhsLZ(u,t,beta,rho,sigma):
    x,y,z = u
    return [sigma*(y-x), rho*x-y-x*z, x*y-beta*z]

sigma = 10.0
beta = 8.0/3.0
rho1 = 29.0
rho2 = 28.8  # two close values for rho give two very different curves

u01=[1.0,1.0,1.0]
u02=[1.0,1.0,1.0]

t=np.linspace(0.0,50.0,10001)
u1=odeint(rhsLZ,u01,t,args=(beta,rho1,sigma))
u2=odeint(rhsLZ,u02,t,args=(beta,rho2,sigma))

x1,y1,z1=u1[:,0],u1[:,1],u1[:,2]
x2,y2,z2=u2[:,0],u2[:,1],u2[:,2]

from mpl_toolkits.mplot3d import Axes3D

plt.ion()
fig=plt.figure()
ax=Axes3D(fig)
ax.plot(x1,y1,z1,&#39;b-&#39;)
ax.plot(x2,y2,z2,&#39;r:&#39;)
ax.set_xlabel(&#39;x&#39;)
ax.set_ylabel(&#39;y&#39;)
ax.set_zlabel(&#39;z&#39;)
ax.set_title(&#39;Lorenz equations with rho = %g, %g&#39; % (rho1,rho2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_23_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure()
ax=Axes3D(fig)
ax.plot(x1,y1,z1)
ax.set_xlabel(&#39;x&#39;)
ax.set_ylabel(&#39;y&#39;)
ax.set_zlabel(&#39;z&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_24_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure()
ax=Axes3D(fig)
ax.plot(x2,y2,z2)
ax.set_xlabel(&#39;x&#39;)
ax.set_ylabel(&#39;y&#39;)
ax.set_zlabel(&#39;z&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_25_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should play around with the time interval (in the definition of varible t) to observe the predictable, followed by chaotic behaviour. ANd play with other parameters.&lt;/p&gt;

&lt;h3 id=&#34;van-der-pol-equation&#34;&gt;van der Pol equation&lt;/h3&gt;

&lt;p&gt;This equation is used as a testbed for numerical software. It is nonlinear, and collapses to a periodic orbit very quickly. We can include information about the Jacobian, the derivative of the vector function  $$\mathbf{f}$$&lt;br /&gt;
 in the ODE system $$\mathbf{y}&amp;rsquo; = \mathbf{f}(\mathbf{y},t)$$, into the ODE solver, to help it choose appropriate step sizes and reduce errors.&lt;/p&gt;

&lt;p&gt;The van der Pol equation is this:&lt;/p&gt;

&lt;p&gt;$$y&amp;rdquo; - \mu(1-y^2)y&amp;rsquo; + y = 0$$&lt;/p&gt;

&lt;p&gt;with the usual initial conditons for $$y(0), y&amp;rsquo;(0)$$. In vector form, we write&lt;/p&gt;

&lt;p&gt;$$\mathbf{y} = (y,y&amp;rsquo;)^T, \qquad \mathbf{f}(\mathbf{y}) = (y&amp;rsquo;, \mu(1-y^2)y&amp;rsquo; - y)^T.$$&lt;/p&gt;

&lt;p&gt;The Jacobian is a 2x2 matrix of partial derivatives for $$\mathbf{f}$$, which is&lt;/p&gt;

&lt;p&gt;$$\mathbf{J}(\mathbf{y}) =&lt;br /&gt;
\left(&lt;br /&gt;
\begin{array}{cc}&lt;br /&gt;
0 &amp;amp; 1 \&lt;br /&gt;
-2\mu y * y&amp;rsquo; -1 &amp;amp; \mu(1-y^2)&lt;br /&gt;
\end{array}&lt;br /&gt;
\right)&lt;/p&gt;

&lt;p&gt;$$&lt;/p&gt;

&lt;p&gt;We set up the code as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def rhsVDP(y,t,mu):
    return [ y[1], mu*(1-y[0]**2)*y[1] - y[0]]

def jac(y,t,mu):
    return [ [0,1], [-2*mu*y[0]*y[1]-1, mu*(1-y[0]**2)]]

mu=3 # adjust from 0 to 10, say
t=np.linspace(0,30,10001)
y0=np.array([2.0,0.0])
y,info=odeint(rhsVDP,y0,t,args=(mu,),Dfun=jac,full_output=True)

print(&amp;quot;mu = %g, number of Jacobian calls is %d&amp;quot; % (mu, info[&#39;nje&#39;][-1]))

plt.plot(t,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mu = 3, number of Jacobian calls is 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_28_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Try playing with the mu parameter. mu=0 gives the harmonic oscillator. mu=10 starts giving pointy spikes. For mu big, you might want to increase the range of to values, from [0,30] to a larger interval like [0,100]. Etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mu=10 # adjust from 0 to 10, say
t=np.linspace(0,30,10001)
y0=np.array([2.0,0.0])
y,info=odeint(rhsVDP,y0,t,args=(mu,),Dfun=jac,full_output=True)

print(&amp;quot;mu = %g, number of Jacobian calls is %d&amp;quot; % (mu, info[&#39;nje&#39;][-1]))

plt.plot(t,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mu = 10, number of Jacobian calls is 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Soutput_30_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;audio-generation&#34;&gt;Audio Generation&lt;/h2&gt;

&lt;h1 id=&#34;audio-generation-1&#34;&gt;Audio Generation&lt;/h1&gt;

&lt;p&gt;With a few lines of code, we can produce sound and play it.&lt;/p&gt;

&lt;p&gt;We will import a few tools to make this possible, including pylab for plotting and numerical work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
from pylab import *
from IPython.display import Audio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now set up five seconds of sound, sampled at 8000 times per second. We generate two pure tones together at 440 and 442 Hertz. This corresponds to a musical note at A above middle C. The slight difference in frequecies will cause a beating, or fluctuation of the sound at 2 beats per second.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Fs = 8000.0
Len = 5
t = linspace(0,Len,Fs*Len)
f1 = 442.0
f2 = 440.0
signal = sin(2*pi*f1*t) + sin(2*pi*f2*t) 

Audio(data=signal, rate=Fs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;            &amp;lt;audio controls=&amp;quot;controls&amp;quot; &amp;gt;
                &amp;lt;source src=&amp;quot;data:audio/wav;base64,&amp;quot; type=&amp;quot;audio/wav&amp;quot; /&amp;gt;
                Your browser does not support the audio element.
            &amp;lt;/audio&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can analyse this signal with the Fourier transform. Plotting, we see the energy is concentrated need 440 Hz (and there is a mirror image in the frequency near 8000-440 Hz).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;freqs = t*Fs/Len   # a list of frequencies, in Hertz
fsig = abs(fft(signal))  # Fourier transform of the signal
plot(freqs,fsig)  # amplitude versus frequency
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7fdb59e82358&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Auoutput_5_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By zooming in on the relevant part of the signal, we can see the presence of energy at the two frequencies of 440 Hz and 442 Hz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot(freqs[2100:2300],fsig[2100:2300])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7fdb581e5940&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/P_Auoutput_7_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some note on audio in the computer.&lt;/p&gt;

&lt;p&gt;The sound we hear with our ears are the rapid vibrations of air pressure on our eardrums, usually generated from vibrations of some object like a guitar string, drum head, or the vocal cords of a human. These sounds are represented as a function of time. In the computer, we represent this function as a list of numbers, or samples, that indicate the value of the function at a range of time values.&lt;/p&gt;

&lt;p&gt;Usually, we sample at uniform time intervals. In the example above, we have 8000 samples per second, for a length of 5 seconds. The Shannon sampling theorem tells us that we need to sample at least as fast as twice the highest frequency that we want to reproduce.&lt;/p&gt;

&lt;p&gt;Humans with exceptional hearing can hear frequencies up to 20,000 Hz (20 kHz). This suggests we should sample at least at 40,000 samples per second for high quality audio. In fact, a compact disk is sampled at 44100 samples per second, and digital audio tapes at 48000 samples per second.&lt;/p&gt;

&lt;p&gt;But, since computer speakers are often of lower quality, we typically sample at lower rates like 8000, 10000, or 22050 samples per second. That give sound that is &amp;ldquo;good enough&amp;rdquo; and saves on computer memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;youtube&#34;&gt;YouTube&lt;/h2&gt;

&lt;p&gt;With just a couple of lines, you can insert a YouTube video into your Jupyter notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.display import YouTubeVideo
YouTubeVideo(&#39;kthi--SH2Nk&#39;)   # Counting to 100 in Cree 

&lt;/code&gt;&lt;/pre&gt;

&lt;iframe
    width=&#34;600&#34;
    height=&#34;500&#34;
    src=&#34;https://www.youtube.com/embed/kthi--SH2Nk&#34;
    frameborder=&#34;0&#34;
    allowfullscreen
&gt;&lt;/iframe&gt;
        

&lt;h2 id=&#34;d3-and-games&#34;&gt;D3 and Games&lt;/h2&gt;

&lt;h1 id=&#34;d3-and-fancy-user-interface&#34;&gt;d3 and fancy user interface&lt;/h1&gt;

&lt;p&gt;We can use a resource called d3 to great very complex user interfaces in a Notebook.&lt;/p&gt;

&lt;p&gt;In this example,  a cluster of balls is created that moves around as the computer mouse chases the balls, as displayed here. Click the picture to interact with the example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://intro.syzygy.ca/img/assets/P_d3_html.html&#34;&gt;
  &lt;img src=&#34;http://intro.syzygy.ca/img/assets/Balls.png&#34; alt=&#34;Chase the balls&#34; &gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This code was poached from here:&lt;br /&gt;
&lt;a href=&#34;https://github.com/skariel/IPython_d3_js_demo/blob/master/d3_js_demo.ipynb&#34;&gt;https://github.com/skariel/IPython_d3_js_demo/blob/master/d3_js_demo.ipynb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three cells in this example.
- the first cell creates a file, which has some html code and javascript to control the balls
- the second cell defines Python functions that edie the file, to adjust the number of balls, etc.
- the third cell calls the Python funciton f1 that launches the html and javascript.&lt;/p&gt;

&lt;p&gt;Here is the first cell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%writefile f1.template
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;/&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://mbostock.github.io/d3/talk/20111018/d3/d3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://mbostock.github.io/d3/talk/20111018/d3/d3.geom.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://mbostock.github.io/d3/talk/20111018/d3/d3.layout.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;

circle {
  stroke: #000;
  stroke-opacity: .5;
}

    &amp;lt;/style&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;body&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

var w = {width},
    h = {height};

var nodes = d3.range({ball_count}).map(function() { return {radius: Math.random() * {rad_fac} + {rad_min}}; }),
    color = d3.scale.category10();

var force = d3.layout.force()
    .gravity(0.1)
    .charge(function(d, i) { return i ? 0 : -2000; })
    .nodes(nodes)
    .size([w, h]);

var root = nodes[0];
root.radius = 0;
root.fixed = true;

force.start();

var svg = d3.select(&amp;quot;#body&amp;quot;).append(&amp;quot;svg:svg&amp;quot;)
    .attr(&amp;quot;width&amp;quot;, w)
    .attr(&amp;quot;height&amp;quot;, h);

svg.selectAll(&amp;quot;circle&amp;quot;)
    .data(nodes.slice(1))
  .enter().append(&amp;quot;svg:circle&amp;quot;)
    .attr(&amp;quot;r&amp;quot;, function(d) { return d.radius - 2; })
    .style(&amp;quot;fill&amp;quot;, function(d, i) { return color(i % {color_count}); });

force.on(&amp;quot;tick&amp;quot;, function(e) {
  var q = d3.geom.quadtree(nodes),
      i = 0,
      n = nodes.length;

  while (++i &amp;lt; n) {
    q.visit(collide(nodes[i]));
  }

  svg.selectAll(&amp;quot;circle&amp;quot;)
      .attr(&amp;quot;cx&amp;quot;, function(d) { return d.x; })
      .attr(&amp;quot;cy&amp;quot;, function(d) { return d.y; });
});

svg.on(&amp;quot;mousemove&amp;quot;, function() {
  var p1 = d3.svg.mouse(this);
  root.px = p1[0];
  root.py = p1[1];
  force.resume();
});

function collide(node) {
  var r = node.radius + 16,
      nx1 = node.x - r,
      nx2 = node.x + r,
      ny1 = node.y - r,
      ny2 = node.y + r;
  return function(quad, x1, y1, x2, y2) {
    if (quad.point &amp;amp;&amp;amp; (quad.point !== node)) {
      var x = node.x - quad.point.x,
          y = node.y - quad.point.y,
          l = Math.sqrt(x * x + y * y),
          r = node.radius + quad.point.radius;
      if (l &amp;lt; r) {
        l = (l - r) / l * .5;
        node.x -= x *= l;
        node.y -= y *= l;
        quad.point.x += x;
        quad.point.y += y;
      }
    }
    return x1 &amp;gt; nx2
        || x2 &amp;lt; nx1
        || y1 &amp;gt; ny2
        || y2 &amp;lt; ny1;
  };
}

    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the second cell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.display import IFrame
import re

def replace_all(txt,d):
    rep = dict((re.escape(&#39;{&#39;+k+&#39;}&#39;), str(v)) for k, v in d.items())
    pattern = re.compile(&amp;quot;|&amp;quot;.join(rep.keys()))
    return pattern.sub(lambda m: rep[re.escape(m.group(0))], txt)    

count=0
def serve_html(s,w,h):
    import os
    global count
    count+=1
    fn= &#39;__tmp&#39;+str(os.getpid())+&#39;_&#39;+str(count)+&#39;.html&#39;
    with open(fn,&#39;w&#39;) as f:
        f.write(s)
    return IFrame(&#39;files/&#39;+fn,w,h)

def f1(w=500,h=400,ball_count=150,rad_min=2,rad_fac=11,color_count=3):
    d={
       &#39;width&#39;      :w,
       &#39;height&#39;     :h,
       &#39;ball_count&#39; :ball_count,
       &#39;rad_min&#39;    :rad_min,
       &#39;rad_fac&#39;    :rad_fac,
       &#39;color_count&#39;:color_count
       }
    with open(&#39;f1.template&#39;,&#39;r&#39;) as f:
        s=f.read()
    s= replace_all(s,d)        
    return serve_html(s,w+30,h+30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the third and final cell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f1(ball_count=50, color_count=17, rad_fac=10, rad_min=3, w=600)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Julia for Computing</title>
      <link>http://intro.syzygy.ca/julia-for-computing/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/julia-for-computing/</guid>
      <description>

&lt;h2 id=&#34;julia-for-computing&#34;&gt;Julia for Computing&lt;/h2&gt;

&lt;p&gt;The Julia computing language is a relative newcomer to the compute world that is proving to be very powerful and effective for scientific computation. It aims to combine the flexibility and ease-of-use of am interpreted, dynamic language (like Matlab) with the speed and efficiency of a compiled, statically typed language (like C or C++).&lt;/p&gt;

&lt;p&gt;There are many online resources for learning the Julia language. A good place to start is the documentation provided by the Julia developers at: &lt;a href=&#34;http://docs.julialang.org/&#34;&gt;http://docs.julialang.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good resource for new users is here: &lt;a href=&#34;https://en.wikibooks.org/wiki/Introducing_Julia&#34;&gt;https://en.wikibooks.org/wiki/Introducing_Julia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many software packages that have been developed for Julia to do many common computational tasks. The list of registered Julia packages can be found at &lt;a href=&#34;http://pkg.julialang.org&#34;&gt;http://pkg.julialang.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This chapter focuses on how to use Julia within a Jupyter notebook. Doing simple calculations in Julia is very straightforward. We show how to make a few plots, and how to build rich graphics files.&lt;/p&gt;

&lt;p&gt;A couple of caveats: The Julia language is still under development, and so some functionality is a bit shaky. For instance, loading a new package (Pkg.add(&amp;ldquo;whatever&amp;rdquo;)) often will fail. Also, the &amp;ldquo;binder button&amp;rdquo; in this book will not run Julia code for you.&lt;/p&gt;

&lt;h2 id=&#34;plotting-with-pyplot&#34;&gt;Plotting with PyPlot&lt;/h2&gt;

&lt;p&gt;In Julia, the PyPlot package will be most familiar to users of Python&amp;rsquo;s PyPlot package, as well Matlab users.
Unlike Python, no &amp;ldquo;magic&amp;rdquo; commands are needed to get Julia to plot onto the Jupyter notebook page.&lt;/p&gt;

&lt;p&gt;To learn more about the PyPlot package for Julia, refer to the Github repo:&lt;a href=&#34;https://github.com/JuliaPy/PyPlot.jl&#34;&gt;https://github.com/JuliaPy/PyPlot.jl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start, begin with the &amp;ldquo;using&amp;rdquo; command to inform Julia that you wish to use the PyPlot package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using PyPlot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To plot an array of numbers, simply use the &amp;ldquo;plot&amp;rdquo; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;plot([1,2,3,4])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_3_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1-element Array{Any,1}:
 PyObject &amp;lt;matplotlib.lines.Line2D object at 0x7f6e338e1cf8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To plot y versus x values, put them both into the plot command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;x = linspace(-3, 3)
y = x.^3 - 3*x
plot(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_5_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1-element Array{Any,1}:
 PyObject &amp;lt;matplotlib.lines.Line2D object at 0x7f6e3387cbe0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To plot a surface, creat your x and y variables, expand to a grid, and use this to define the z values on the surface&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;n = 100
x = linspace(-3, 3, n)
y = linspace(-3,3,n)

xgrid = repmat(x&#39;,n,1)
ygrid = repmat(y,1,n)

z=exp(-xgrid.^2 - ygrid.^2)

plot_surface(x,y,z)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject &amp;lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection object at 0x7f6e330b1550&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might like to color your surface plot with a color map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;plot_surface(x,y,z,cmap=&amp;quot;jet&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject &amp;lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection object at 0x7f6e337812e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To plot this surface instead as an image, use the &amp;ldquo;imshow&amp;rdquo; command, which is somewhat like &amp;ldquo;imagesc&amp;rdquo; in Matlab.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;imshow(z)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/output_11_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject &amp;lt;matplotlib.image.AxesImage object at 0x7f6e336a7be0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plotting-with-gadfly&#34;&gt;Plotting with Gadfly&lt;/h2&gt;

&lt;p&gt;The Gadfly package for Julia is a very nice plotting package that allows interactive control of the plots from within the notebook. According to the documentation, it is based largely on Hadley Wickhams&amp;rsquo;s ggplot2 (&lt;a href=&#34;http://ggplot2.org/&#34;&gt;http://ggplot2.org/&lt;/a&gt;) for R and Leland Wilkinson&amp;rsquo;s book The Grammar of Graphics (&lt;a href=&#34;https://www.cs.uic.edu/~wilkinson/TheGrammarOfGraphics/GOG.html&#34;&gt;https://www.cs.uic.edu/~wilkinson/TheGrammarOfGraphics/GOG.html&lt;/a&gt;). It was Daniel C. Jones&amp;rsquo; brainchild and is now maintained by the community.&lt;/p&gt;

&lt;p&gt;Details on the package are here: &lt;a href=&#34;http://gadflyjl.org/stable/index.html&#34;&gt;http://gadflyjl.org/stable/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start using Gadfly, use the &amp;ldquo;using&amp;rdquo; command to inform Julia that you want to use this package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using Gadfly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the plot command to plot x and y values. Clicking on the graph gives you access to controls to pan and zoom.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;plot(x=[1,2,3,4,5,6],y=[1,4,9,16,25,36])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/Gadfly1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A few details line lines and points can be added explicitly to the plot, as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;plot(x=[0,1,2,3,4,5,6], y=[0,1,4,9,16,25,36], Geom.point, Geom.line)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/Gadfly2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gadfly even knows how to plot functions directly, as in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;plot([sin, cos], 0, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/Gadfly3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gadfly excels at plotting data from large data sets. Here we load in some standard R data sets and plot the information therein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using RDatasets
plot(dataset(&amp;quot;datasets&amp;quot;, &amp;quot;iris&amp;quot;), x=&amp;quot;SepalLength&amp;quot;, y=&amp;quot;SepalWidth&amp;quot;, Geom.point)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/Gadfly4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An alternate way is to assign a variable with a particular data set (the iris data set, which is information about a collectin of flowers) and plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;iris = dataset(&amp;quot;datasets&amp;quot;, &amp;quot;iris&amp;quot;)
plot(iris, x=:SepalLength, y=:SepalWidth, color=:Species, Geom.point)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/Gadfly5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;high-resolution-graphics-into-files&#34;&gt;High resolution graphics into files&lt;/h2&gt;

&lt;p&gt;Very often we need to create some high resolution graphics in a computing environment and then export it in a file, to use within some other application. For instance, a book may need a high quality diagram that is best created by some algorithm.&lt;/p&gt;

&lt;p&gt;This section demonstrates a simple technique to do this.&lt;/p&gt;

&lt;p&gt;The basic idea is to create a Scalable Vector Graphics file (of type .svg) and fill it with text commands that indicate what to draw for the graphics image. You can read more details of all that can be draw here: &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&#34;&gt;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WARNING: images displayed are often &amp;ldquo;cached&amp;rdquo; by your browser (Firefox, Chrome, Safari, etc), which means the file is pre-loaded for convenience. However, if your Jupyter code changes the .svg file, the browser does not know to re-draw the new image. One way to force it to draw the new image is to re-load the page. (Remember to save first.)&lt;/p&gt;

&lt;h3 id=&#34;example-1-two-lines&#34;&gt;Example 1 - Two lines&lt;/h3&gt;

&lt;p&gt;In this example, we will simply draw a couple of lines. The file will have four text entries. The first entry marks the  file as an svg file, the last entry indicates the end of the svg file. Two entries in the middle draw two lines. The text will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; version=&#39;1.1&#39; width=&#39;100%&#39; height=&#39;100%&#39; viewBox=&#39;-1  -1 2 2&#39;&amp;gt;
&amp;lt;line x1=&#39;-1&#39; y1=&#39;1&#39;  x2=&#39;1&#39; y2=&#39;-1&#39; stroke=&#39;black&#39; stroke-width=&#39;.01&#39; /&amp;gt;
&amp;lt;line x1=&#39;-1&#39; y1=&#39;-1&#39; x2=&#39;1&#39; y2=&#39;1&#39; stroke=&#39;red&#39; stroke-width=&#39;.01&#39; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &amp;ldquo;open&amp;rdquo; command in Julia to open a file, and write into it with the &amp;ldquo;write command.&amp;rdquo; Note we use a &amp;ldquo;do&amp;rdquo; look to ensure that the file is closed once the writing is all done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;open(&amp;quot;simplegraphics.svg&amp;quot;,&amp;quot;w&amp;quot;) do f
    write(f,&amp;quot;&amp;lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; version=&#39;1.1&#39; width=&#39;100%&#39; height=&#39;100%&#39; viewBox=&#39;-1  -1 2 2&#39;&amp;gt; \n&amp;quot;)
    write(f,&amp;quot;&amp;lt;line x1=&#39;-1&#39; y1=&#39;1&#39;  x2=&#39;1&#39; y2=&#39;-1&#39; stroke=&#39;black&#39; stroke-width=&#39;.01&#39; /&amp;gt; \n&amp;quot;)
    write(f,&amp;quot;&amp;lt;line x1=&#39;-1&#39; y1=&#39;-1&#39; x2=&#39;1&#39; y2=&#39;1&#39; stroke=&#39;red&#39; stroke-width=&#39;.01&#39; /&amp;gt; \n&amp;quot;)
    write(f,&amp;quot;&amp;lt;/svg&amp;gt;&amp;quot;)
end


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To display the file, we use either of these two Markdown commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![The Simple Graphics](simplegraphics.svg)
&amp;lt;img src=&amp;quot;simplegraphics.svg&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;500&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second choice gives you a bit more control over the size of the output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/simplegraphics.png&#34; alt=&#34;The Simple Graphics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/simplegraphics.png&#34; width=&#34;500&#34; height=&#34;500&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-2-a-star-is-born&#34;&gt;Example 2 - A star is born&lt;/h3&gt;

&lt;p&gt;Here is a slightly more interesting example. We draw a five-pointed star by connecting lines across 5 evenly spaced points on a circle. This is probably more fun to do algorithmically like this, rather than trying to do a freehand drawing of a star.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;open(&amp;quot;star.svg&amp;quot;, &amp;quot;w&amp;quot;) do f
    write(f,&amp;quot;&amp;lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; version=&#39;1.1&#39; width=&#39;100%&#39; height=&#39;100%&#39; viewBox=&#39;-1  -1 2 2&#39;&amp;gt; \n&amp;quot;)
    for i in 1:5
        x1 = sin(i*2*pi/5)
        y1 = -cos(i*2*pi/5)
        x2 = sin((i+2)*2*pi/5)
        y2 = -cos((i+2)*2*pi/5)
        write(f,&amp;quot;&amp;lt;line x1=&#39;$x1&#39; y1=&#39;$y1&#39;  x2=&#39;$x2&#39; y2=&#39;$y2&#39; stroke=&#39;black&#39; stroke-width=&#39;.01&#39; /&amp;gt; \n&amp;quot;)
    end
    write(f,&amp;quot;&amp;lt;/svg&amp;gt;&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/star.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-3-mathieu-spectra&#34;&gt;Example 3 -  Mathieu Spectra&lt;/h3&gt;

&lt;p&gt;We construct spectra for the almost Mathieu operator, also known as the Hofstadter Butterfly. &lt;a href=&#34;https://en.wikipedia.org/wiki/Hofstadter&#39;s_butterfly&#34;&gt;https://en.wikipedia.org/wiki/Hofstadter&#39;s_butterfly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personally, I&amp;rsquo;ve done this before using MATLAB, taking a lot of care to make it fast. Here in Julia, it seems to be fast even without any special tricks. In particular, I leave the matrices U,V, in their natural form, and compute directly in their full matrix form.&lt;/p&gt;

&lt;p&gt;This code creates a file mathieu.svg which can be opened directly in Jupyter Hub using the browser. In fact, the image opened separately looks better than the display here.&lt;/p&gt;

&lt;h3 id=&#34;the-math&#34;&gt;The Math&lt;/h3&gt;

&lt;p&gt;The almost Mathieu operator describes the energy levels of an electron moving in a periodic crystal (2D), under the influence of a magnetic fields. This causes only certain energy levels to be allowed, depending on a parameter&lt;/p&gt;

&lt;p&gt;$$\mu = e^{2\pi i \theta}.$$&lt;/p&gt;

&lt;p&gt;We take two universal unitaries $$u,v$$ which satisfy a commutation relation&lt;/p&gt;

&lt;p&gt;$$ vu = \mu uv.$$&lt;/p&gt;

&lt;p&gt;The related energy operator (almost Mathieu operator) is the linear, self adjoint operator&lt;/p&gt;

&lt;p&gt;$$h = u + u^* + v + v^*.$$&lt;/p&gt;

&lt;p&gt;The curious thing is that the spectrum of $$h$$ is either a union of intervals, or a Cantor set, depending on whether $$\theta$$ is rational or irrational. Which seems odd in physics, that a tiny perturbation in one parameter should give such a fundamental change in the nature of the spectra.&lt;/p&gt;

&lt;p&gt;In the case where $$\theta = p/q$$ is rational, we can compute the spectrum exactly.&lt;/p&gt;

&lt;p&gt;We define here two unitaries $$U$$ and $$V$$ that are $$q\times q$$ matrices. $$U$$ is a diagonal matrix, while $$V$$ is a permutation matrix. They satisfy the fundamental intertwining identity&lt;/p&gt;

&lt;p&gt;$$ VU = e^{2\pi i \theta} UV, \mbox{ where } \theta = p/q.$$&lt;/p&gt;

&lt;p&gt;Replacing $$U,V$$ by a scalar multiple $$z_1U, z_2V$$ will satisfy the same commutation constraint. Setting $$z_1 = z_2 = 1$$ gives one extreme set of spectral points, that form one-half of the interval endpoints that make up the spectrum. Setting $$z_1 = z_2 = e^{2\pi i/q}$$ gives the other extreme set, forming the other set of endpoints.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;The matrix $$H$$ defined below is the self adjoint sum of these unitaries, and $$L$$ has constants thrown in to get the other extreme points of the spectra.&lt;/p&gt;

&lt;p&gt;We compute the eigenvalues, then throw them into a file that plots all the lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;U(p,q) = diagm(exp(2*pi*1im*(1:q)*p/q))
V(p,q) = circshift(eye(q),(0,1))
H(p,q) = U(p,q)+U(p,q)&#39; + V(p,q)+V(p,q)&#39;
L(p,q) = exp(pi*1im/q)*U(p,q)+exp(-pi*1im/q)U(p,q)&#39; + exp(pi*1im/q)*V(p,q)+exp(-pi*1im/q)*V(p,q)&#39;
eigH(p,q) = eig(H(p,q))[1]
eigL(p,q) = eig(L(p,q))[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;eigL (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;function printaline(f,xone,xtwo,y)
    y8 = y*8
    print(f,&amp;quot;&amp;lt;line x1=&#39;$xone&#39; y1=&#39;$y8&#39; x2=&#39;$xtwo&#39; y2=&#39;$y8&#39; stroke=&#39;black&#39; stroke-width=&#39;.01&#39; /&amp;gt; \n&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;printaline (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;f = open(&amp;quot;mathieu.svg&amp;quot;,&amp;quot;w&amp;quot;)
print(f,&amp;quot;&amp;lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; version=&#39;1.1&#39; width=&#39;100%&#39; height=&#39;100%&#39; viewBox=&#39;-4  0 8 8&#39;&amp;gt; \n&amp;quot;)
printaline(f,-4,4,0)
printaline(f,-4,4,1)
for q=2:50
    for p= 1:(q-1)
        if gcd(p,q)==1
            eig1 = eigH(p,q)
            eig2 = eigL(p,q)
            for k=1:q
                printaline(f,eig1[k],eig2[k],p/q)
            end
        end
    end
end
print(f,&amp;quot;&amp;lt;/svg&amp;gt; \n&amp;quot;)
close(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now display the spectra using the image command in Markdown language.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;/img/mathieu.svg&amp;quot; width=&amp;quot;600&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/mathieu.png&#34; width=&#34;600&#34; height=&#34;600&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;animation-in-julia&#34;&gt;Animation in Julia.&lt;/h2&gt;

&lt;p&gt;Animated plots in Julia can be created using the matplotlib tools that we know from Python.&lt;/p&gt;

&lt;p&gt;The idea is the same. There are three steps to creating an object that will contain the animation:
- draw the empty figure
- define an init function, and an animate function, that will draw the successive frames
- create the animation using the FuncAnimation fucntion (which calls init and animate)&lt;/p&gt;

&lt;p&gt;This object is then saved as an MP4 file, which can then be played in the notebook using an html command.&lt;/p&gt;

&lt;p&gt;For more ideas on animation, take a look here:
 &lt;a href=&#34;http://nbviewer.jupyter.org/github/tom26/JuliaFun/blob/master/2D%203-Body%20Problem.ipynb&#34;&gt;http://nbviewer.jupyter.org/github/tom26/JuliaFun/blob/master/2D%203-Body%20Problem.ipynb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do a simple animation, drawing 3 lines across a plot.&lt;/p&gt;

&lt;p&gt;First, tell Julia the tools we need to load in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using PyPlot
using PyCall
@pyimport matplotlib.animation as anim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We first construct the empty figure. For convenience, we define 3 global data structures called lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;#Construct Figure and Plot Data
fig = figure(&amp;quot;MyFigure&amp;quot;,figsize=(10,10))
ax = axes(xlim = (0,10),ylim=(0,10))
global line1 = ax[:plot]([],[],&amp;quot;r-&amp;quot;)[1]
global line2 = ax[:plot]([],[],&amp;quot;g-&amp;quot;)[1]
global line3 = ax[:plot]([],[],&amp;quot;b-&amp;quot;)[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/J_Animation1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject &amp;lt;matplotlib.lines.Line2D object at 0x7f3be6f4d2e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now define the init function, which sets the data for the first frame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# Define the init function, which draws the first frame (empty, in this case)
function init()
    global line1
    global line2
    global line3
    line1[:set_data]([],[])
    line2[:set_data]([],[])
    line3[:set_data]([],[])
    return (line1,line2,line3,Union{})  # Union{} is the new word for None
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;init (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next is the animation function, which will draw each frame of the animation using index i.&lt;/p&gt;

&lt;p&gt;In this case, we just draw three lines. The first is along the line x=y, going from point (0,0) to (i/10,i/10).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# animate draws the i-th frame, where i starts at i=0 as in Python
function animate(i)
    global line1
    global line2
    global line3
    x = (0:i)/10.0
    line1[:set_data](x,x)
    line2[:set_data](1+x,x)
    line3[:set_data](2+x,x)
    return (line1,line2,line3,Union{})
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;animate (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we create the animation object by calling the Python function FuncAnimaton.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;myanim = anim.FuncAnimation(fig, animate, init_func=init, frames=100, interval=20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;PyObject &amp;lt;matplotlib.animation.FuncAnimation object at 0x7f3be65cc5c0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is converted to an MP4 movie file and saved on disk in this format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;myanim[:save](&amp;quot;3Lines.mp4&amp;quot;, bitrate=-1, extra_args=[&amp;quot;-vcodec&amp;quot;, &amp;quot;libx264&amp;quot;, &amp;quot;-pix_fmt&amp;quot;, &amp;quot;yuv420p&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we display the movie in a Julia cell as follows. Note it has animation controls for the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# Function for creating an embedded video given a filename
function html_video(filename)
    base64_video = base64encode(open(readbytes, filename))
	&amp;quot;&amp;quot;&amp;quot;&amp;lt;video controls src=&amp;quot;data:video/x-m4v;base64,$base64_video&amp;quot;&amp;gt;&amp;quot;&amp;quot;&amp;quot;
end

display(&amp;quot;text/html&amp;quot;, html_video(&amp;quot;3Lines.mp4&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;video controls src=&#34;data:video/x-m4v;base64,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&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;seismic-julia-package&#34;&gt;Seismic Julia Package&lt;/h2&gt;

&lt;p&gt;The Seismic Package for Julia is under development by SAIG (Signal Analysis and Imaging Group) at the University of Alberta. This module provides tools to read, write, process, and plot 3D reflection seismic data.&lt;/p&gt;

&lt;p&gt;We use this as an example of how to use a large, external Julia package in the syzygy system.&lt;/p&gt;

&lt;p&gt;To get started, you first notify Julia that you will be using the two packages PyPlot and Seismic. Enter the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using PyPlot, Seismic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well, this will load in the required packages.&lt;/p&gt;

&lt;p&gt;However, a few common problems may arise.&lt;/p&gt;

&lt;p&gt;First, the packages might not be found in the current path. In this case, you need to run &lt;code&gt;Pkg.add(&amp;quot;PyPlot&amp;quot;)&lt;/code&gt; to install the PyPlot package. You may alos need to run &lt;code&gt;Pkg.add(&amp;quot;Seismic&amp;quot;)&lt;/code&gt; to install the Seismic package.&lt;/p&gt;

&lt;p&gt;These commands are entered like this (but don&amp;rsquo;t use them unless you got the error message):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;Pkg.add(&amp;quot;PyPlot&amp;quot;)
Pkg.add(&amp;quot;Seismic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve added the packages, you should again use the command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using PyPlot, Seismic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second problem you may have is that during the &amp;ldquo;using&amp;rdquo; command execution, Julia may have trouble precompiling the modules (you will get an error message). Typically this is due to some incompatibility with the &amp;ldquo;Compat&amp;rdquo; module. This is a known problem which hopefully will be fixed soon. A work-around is to save your Notebook, close the Jupyter Server, then restart the Server. This seems to load in the compiled packages appropriately.&lt;/p&gt;

&lt;p&gt;A third problem you may have is that these are large packages, and the 1 GigaByte of filespace you have been allotted may not be enough for all this. One solution is to get rid of any excess files you no longer need. (Just delete them.) Another solution is to request from your administrator a larger filespace allocation.&lt;/p&gt;

&lt;p&gt;You are now ready to use Seismic Julia.&lt;/p&gt;

&lt;p&gt;First, we use the &amp;ldquo;download command&amp;rdquo; to grab some data from the United States Geological Survey webserver, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;download(&amp;quot;http://certmapper.cr.usgs.gov/nersl/NPRA/seismic/1979/616_79/PROCESSED/616_79_PR.SGY&amp;quot;, &amp;quot;616_79_PR.SGY&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 11.3M  100 11.3M    0     0   189k      0  0:01:01  0:01:01 --:--:--  113k


number of traces: 1908
number of samples per trace: 1500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new file on you server, named &amp;ldquo;616_79_PR.SGY&amp;rdquo; which is 11 Megabytes of data.&lt;/p&gt;

&lt;p&gt;Use the &amp;ldquo;SegyToSeis&amp;rdquo; command to convert this SEGY-style file into a .seis file (the native file type for the Seismic Julia package).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;SegyToSeis(&amp;quot;616_79_PR.SGY&amp;quot;, &amp;quot;616_79_PR.seis&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;number of traces: 1908
number of samples per trace: 1500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new file called &amp;ldquo;616_79_PR.seis&amp;rdquo; which also is about 11 Megabytes large.&lt;/p&gt;

&lt;p&gt;We next read the file, and extract three data structures:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;d, h, e = SeisRead(&amp;quot;616_79_PR.seis&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we plot the data in these data structures using &amp;ldquo;SeisPlot&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;SeisPlot(d[1:500, :], e, cmap=&amp;quot;PuOr&amp;quot;, wbox=9);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/J_Seismic1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This view is a cross-sectional image of the earth showing some interesting geological layers sloping down to the right. It was constructed from a seismic experiment using vibrational waves to explore the earth&amp;rsquo;s subsurface.&lt;/p&gt;

&lt;p&gt;To learn more about the many utilities available in Seismic Julia, refer to the source pages at: &lt;a href=&#34;https://github.com/SeismicJulia&#34;&gt;https://github.com/SeismicJulia&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R for Computing</title>
      <link>http://intro.syzygy.ca/r-for-computing/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/r-for-computing/</guid>
      <description>

&lt;h1 id=&#34;r-for-computing&#34;&gt;R for Computing&lt;/h1&gt;

&lt;p&gt;Some notes on how to use R.&lt;/p&gt;

&lt;p&gt;(Note that the binder button will not run R code for you.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unix Tricks</title>
      <link>http://intro.syzygy.ca/unix-tricks/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/unix-tricks/</guid>
      <description>

&lt;h2 id=&#34;unix-tricks&#34;&gt;Unix tricks&lt;/h2&gt;

&lt;p&gt;In the background, Jupyter Hub runs on Unix, and you can access the Unix bash shell to do all your Unix magic from the command line. Just open a new &amp;ldquo;terminal&amp;rdquo; from the front page of your Jupyter server.&lt;/p&gt;

&lt;p&gt;However, I am not a big Unix fan. I prefer to point and click. So here are a few tricks I&amp;rsquo;ve learned to avoid the terminal commands.&lt;/p&gt;

&lt;h2 id=&#34;unix-and-magic-in-a-notebook&#34;&gt;Unix and Magic in a Notebook.&lt;/h2&gt;

&lt;p&gt;While running a Jupyter Notebook, you can access many Unix commands directly, without opening a terminal window.&lt;/p&gt;

&lt;p&gt;These are called &amp;ldquo;magic&amp;rdquo; commands and always start with the percent sign %.&lt;/p&gt;

&lt;p&gt;Here are a few familiar Unix commands you might find useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%ls &amp;ndash; to list all files in the current directory&lt;/li&gt;
&lt;li&gt;%cd &amp;ndash; to see the name of your current directory&lt;/li&gt;
&lt;li&gt;%cd dirname - to change directory (enter the name of the directory you want)&lt;/li&gt;
&lt;li&gt;%cp oldfile newfile &amp;ndash; to copy the oldfile onto a newfile&lt;/li&gt;
&lt;li&gt;%rm filename &amp;ndash; to remove (delete) the file named &amp;ldquo;filename&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, you can move all around the directory tree using these magic commands. So for instance, you might want to copy a file from Directory1 into Directory2. You would use a command like this:
- %cp /home/myusername/Directory1/filename /home/myusername/Directory2/filename&lt;/p&gt;

&lt;p&gt;Where &amp;ldquo;myusername&amp;rdquo; is whatever the Jupyter server has called your account. Use the %cd command to see the path name that includes your user name.&lt;/p&gt;

&lt;p&gt;To see all possible magic commands available in a Jupyter notebook, type the (magic) command
- %lsmagic&lt;/p&gt;

&lt;p&gt;With a double percentage sign %% you signal to Jupyter that the whole cell is to be interpreted accordingly. For instance a cell like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%latex
\[ \int_0^1 f(x) \,dx = F(1) - F(0) \]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tells the notebook to read the whole cell as latex code, and render it accordingly.&lt;/p&gt;

&lt;p&gt;A good reference to what all these magic commands can do is here: &lt;a href=&#34;https://ipython.org/ipython-doc/3/interactive/magics.html&#34;&gt;https://ipython.org/ipython-doc/3/interactive/magics.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;magic-in-a-notebook&#34;&gt;Magic in a Notebook&lt;/h2&gt;

&lt;p&gt;In the last section, we discussed how to access Unix commands from the Jupyter Notebook. The keyis to use &amp;ldquo;magic&amp;rdquo; commands, that start with a percentage sign %.&lt;/p&gt;

&lt;p&gt;There are many more magic commands available. To see all possible magic commands available in a Jupyter notebook, type the (magic) command
- %lsmagic&lt;/p&gt;

&lt;p&gt;A good reference to what all these magic commands can do is here: &lt;a href=&#34;https://ipython.org/ipython-doc/3/interactive/magics.html&#34;&gt;https://ipython.org/ipython-doc/3/interactive/magics.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a double percentage sign %% you signal to Jupyter that the whole cell is to be interpreted accordingly. For instance a cell like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%latex
\[ \int_0^1 f(x) \,dx = F(1) - F(0) \]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tells the notebook to read the whole cell as latex code, and render it accordingly.&lt;/p&gt;

&lt;p&gt;There are similar commands for creating cells with HTML code, Ruby, Perl, JavaScript, etc etc.&lt;/p&gt;

&lt;p&gt;(Maybe I will give a few examples here too.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Git and GitHub</title>
      <link>http://intro.syzygy.ca/using-git-and-github/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/using-git-and-github/</guid>
      <description>

&lt;h2 id=&#34;using-git-and-github&#34;&gt;Using Git and Github&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is a Unix command used for sharing code and other computer files with colleagues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt; is a popular place on the web to store your code and other computer files, either privately or for the whole world to see. These collections are organized into units (like folders) called repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is also used for version control when working on a large computer project, where you need to keep track of changes in many different files, possibly written by many different people. Because &lt;strong&gt;Git&lt;/strong&gt; can be used for very complex projects, it is a very powerful tool.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s keep things simple here. The author of this book has a public &lt;strong&gt;Github&lt;/strong&gt; site, which has many repositories that he has created for various purposes. You are welcome to look at his public site here: &lt;a href=&#34;https://github.com/mlamoureux&#34;&gt;https://github.com/mlamoureux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a repository for the source code written for this eBook, you can look at it here: &lt;a href=&#34;https://github.com/mlamoureux/UsingSyzygy&#34;&gt;https://github.com/mlamoureux/UsingSyzygy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make a copy of this repository on your syzygy.ca account, simply open a new Notebook (say, in Python) and enter the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%bash
git clone https://github.com/mlamoureux/UsingSyzygy.git 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make a new folder on your Jupyter Hub called &amp;ldquo;UsingSyzygy&amp;rdquo; that will have all the code inside that folder. You can now open those files and run the code in your server.&lt;/p&gt;

&lt;p&gt;Now, as you get more experience with &lt;strong&gt;Git&lt;/strong&gt; and &lt;strong&gt;Github&lt;/strong&gt;, you might like to clone some other people&amp;rsquo;s repositories and use their code. It is a good idea to keep your Jupyter Hub organized, so you can create a new folder, and clone the new stuff directly into that new folder. A series of Notebook commands to do this would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%mkdir MyNewDirectory 

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%cd MyNewDirectory

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%bash
git clone https://github.com/THE-USER-NAME/THE-REPOSITORY-NAME.git 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find THE-USER-NAME and THE-REPOSITORY-NAME.git right on &lt;strong&gt;Github&lt;/strong&gt; when you are looking at someone&amp;rsquo;s repository. There is a button on the right, that says &amp;ldquo;Clone or download.&amp;rdquo; Click on &amp;ldquo;Clone or download&amp;rdquo; and request a &amp;ldquo;Clone with HTTPS.&amp;rdquo; You will then get the https address for the repo, which you can paste into the &lt;strong&gt;git clone&lt;/strong&gt; command above.&lt;/p&gt;

&lt;p&gt;Of course, you can also do this in a terminal window (by opening &amp;ldquo;New Terminal&amp;rdquo; in the front page of your Jupyter server). But frankly, I hate the Unix terminal and its command line, so I would naturally advise you to be like me and just avoid Unix.  Use the Notebook directly. :-)&lt;/p&gt;

&lt;p&gt;Some details on cloning &lt;strong&gt;Github&lt;/strong&gt; repos are here:
&lt;a href=&#34;https://help.github.com/articles/cloning-a-repository/&#34;&gt;https://help.github.com/articles/cloning-a-repository/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMPORTANT NOTE: If you are cloning from a PRIVATE repo on &lt;strong&gt;Github&lt;/strong&gt; you will need to do it from the Unix terminal, as the server will ask you for a username and password (to ensure that you really have access to that private repo).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Acknowledgements</title>
      <link>http://intro.syzygy.ca/acknowledgements/</link>
      <pubDate>Thu, 05 Jan 2017 15:18:00 -0800</pubDate>
      
      <guid>http://intro.syzygy.ca/acknowledgements/</guid>
      <description>&lt;p&gt;This eBook was written by Michael Lamoureux. The site was built by James Colliander with &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt; using the &lt;a href=&#34;http://github.com/digitalcraftsman/hugo-material-docs&#34;&gt;Material theme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Syzygy service is brought to you by The Pacific Institute for the Mathematical Sciences in collaboration with and on infrastructure from Compute Canada and Cybera.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pims.math.ca&#34;&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/logos/pims-horiz.png&#34; title=&#34;PIMS&#34; width=&#34;500&#34; height=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://computecanada.org/&#34;&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/logos/biligual-cc-web-logo-flat-white.png&#34; title=&#34;Compute Canada&#34; width=&#34;500&#34; height=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://cybera.ca/&#34;&gt;&lt;img src=&#34;http://intro.syzygy.ca/img/logos/cybera-png-main.png&#34; title=&#34;Cybera&#34; width=&#34;500&#34; height=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- 
&lt;img src=&#34;http://intro.syzygy.ca/img/logos/pims-horiz.png&#34; alt=&#34;PIMS logo&#34; width=500 height=&#34;&#34;&gt;
&lt;img src=&#34;http://intro.syzygy.ca/img/logos/biligual-cc-web-logo-flat-white.png&#34; alt=&#34;Compute Canada logo&#34; width=500 height=&#34;&#34;&gt;
&lt;img src=&#34;http://intro.syzygy.ca/img/logos/cybera-png-main.png&#34; alt=&#34;Cybera logo&#34; width=500 height=&#34;&#34;&gt; --&gt;
</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>http://intro.syzygy.ca/introduction/SUMMARY/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://intro.syzygy.ca/introduction/SUMMARY/</guid>
      <description>

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;README.md&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;chapter1.md&#34;&gt;Getting Started&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;logging-in.md&#34;&gt;Logging In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;unix-and-terminals.md&#34;&gt;Notebooks, terminals and Unix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;the-basic-elements.md&#34;&gt;The Basic Elements&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;using-the-hub.md&#34;&gt;Using the Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-notebooks.md&#34;&gt;Using Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;pretty-text-and-math-in-a-notebook.md&#34;&gt;Pretty text and math in a Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;computing-in-a-notebook.md&#34;&gt;Computing in a Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-python.md&#34;&gt;Python for Computing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;python-2-or-3.md&#34;&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_Plotting.md&#34;&gt;Plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_AnimatedPlots.md&#34;&gt;Animating Plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_SciComp.md&#34;&gt;Scientific Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_Data_analysis.md&#34;&gt;Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_Audio.md&#34;&gt;Audio Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_Youtube.md&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;P_d3-play.md&#34;&gt;d3 and games&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-julia.md&#34;&gt;Julia for Computing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;J_SimplePlots.md&#34;&gt;Plotting with PyPlot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;J_Gadfly.md&#34;&gt;Plotting with Gadfly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;J_Graphics.md&#34;&gt;High res graphics into files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;J_Animation.md&#34;&gt;Animated Plots in Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;J_Seismic.md&#34;&gt;Seismic Julia Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;animated-plots-in-julia.md&#34;&gt;Animated Plots in Julia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-r.md&#34;&gt;R for Computing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Simple plots&lt;/li&gt;
&lt;li&gt;Data analysis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;unix-tricks.md&#34;&gt;Unix Tricks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;moving-files-around.md&#34;&gt;Moving files around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;unix-in-a-notebook.md&#34;&gt;Unix in a Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;magic-in-a-notebook.md&#34;&gt;Magic in a Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-git-and-github.md&#34;&gt;Using Git and Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;using-gitbook.md&#34;&gt;Using Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animated Plots in Julia&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Notes for Ian</title>
      <link>http://intro.syzygy.ca/acknowledgements/some-notes-for-ian-re-tech-issues/</link>
      <pubDate>Thu, 05 Jan 2017 15:18:00 -0800</pubDate>
      
      <guid>http://intro.syzygy.ca/acknowledgements/some-notes-for-ian-re-tech-issues/</guid>
      <description>

&lt;p&gt;##1.
On ubc.syzygy.ca, in Python 3, when I load in matplotlib, it takes too long as it builds fonts and such. Here is the warning I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.
  warnings.warn(&#39;Matplotlib is building the font cache using fc-list. This may take a moment.&#39;)
/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.
  warnings.warn(&#39;Matplotlib is building the font cache using fc-list. This may take a moment.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2&#34;&gt;2.&lt;/h2&gt;

&lt;p&gt;In my file AnimatedPlots.ipyth, the code works fine on ubc.syzygy.ca but fails on mybinder.org
It seems it cannot find the animator code there. Error message is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTML(anim.to_html5_video())

---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
&amp;lt;ipython-input-6-5114ccf53b4c&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 HTML(anim.to_html5_video())

/home/main/anaconda2/envs/python3/lib/python3.5/site-packages/matplotlib/animation.py in to_html5_video(self)
    977                 # We create a writer manually so that we can get the
    978                 # appropriate size for the tag
--&amp;gt; 979                 Writer = writers[rcParams[&#39;animation.writer&#39;]]
    980                 writer = Writer(codec=&#39;h264&#39;,
    981                                 bitrate=rcParams[&#39;animation.bitrate&#39;],

/home/main/anaconda2/envs/python3/lib/python3.5/site-packages/matplotlib/animation.py in __getitem__(self, name)
     87     def __getitem__(self, name):
     88         if not self.avail:
---&amp;gt; 89             raise RuntimeError(&amp;quot;No MovieWriters available!&amp;quot;)
     90         return self.avail[name]
     91 

RuntimeError: No MovieWriters available!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>